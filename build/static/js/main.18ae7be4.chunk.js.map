{"version":3,"sources":["components/core/CPUMemory.js","components/core/constants.js","components/core/instructions.js","components/core/utils.js","components/core/modes.js","components/core/opcodes.js","components/core/CPU.js","components/core/PPUMemory.js","components/core/PPU.js","components/core/mappers/Bank.js","components/core/mappers/Mapper.js","components/core/mappers/NROM.js","components/core/mappers/constants.js","components/core/mappers/MMC1.js","components/core/mappers/MMC3.js","components/core/mappers/UXROM.js","components/core/mappers/CNROM.js","components/core/ROM.js","components/core/APU.js","components/core/Controller.js","components/utils/Merge.js","components/utils/Notifier.js","components/utils/Throttle.js","components/core/Console.js","components/Messages.js","components/Chat.js","components/SiteIntro.js","components/CreateMessage.js","components/CanvasBackground.js","App.js","index.js"],"names":["CPUMemory","Object","classCallCheck","this","zp","Uint8Array","fill","stack","ram","addr","value","RENDERING_MODES","NORMAL","SPLIT","MODES","ABSOLUTE","ABSOLUTE_X","ABSOLUTE_Y","ACCUMULATOR","IMMEDIATE","IMPLIED","INDEXED_INDIRECT_X","INDIRECT","INDIRECT_INDEXED_Y","RELATIVE","ZERO_PAGE","ZERO_PAGE_X","ZERO_PAGE_Y","OPCODES","ADC","AND","ASL","BCC","BCS","BEQ","BIT","BMI","BNE","BPL","BRK","BVC","BVS","CLC","CLD","CLI","CLV","CMP","CPX","CPY","DEC","DEX","DEY","EOR","INC","INX","INY","JMP","JSR","LDA","LDX","LDY","LSR","NOP","ORA","PHA","PHP","PLA","PLP","ROL","ROR","RTI","RTS","SBC","SEC","SED","SEI","STA","STX","STY","TAX","TAY","TSX","TXA","TXS","TYA","ASL_ACC","LSR_ACC","ROL_ACC","ROR_ACC","SLO","INTERRUPTS","KEYBOARD_KEYS","BUTTONS","COLORS","CYCLES","SCANLINES","instructions","0","1","3","5","6","7","8","9","10","13","14","15","16","17","19","21","22","23","24","25","27","29","30","31","32","33","36","37","38","40","41","42","44","45","46","48","49","53","54","56","57","61","62","64","65","69","70","72","73","74","76","77","78","80","81","85","86","88","89","93","94","96","97","101","102","104","105","106","108","109","110","112","113","117","118","120","121","125","126","129","132","133","134","136","138","140","141","142","144","145","148","149","150","152","153","154","157","160","161","162","164","165","166","168","169","170","172","173","174","176","177","180","181","182","184","185","186","188","189","190","192","193","196","197","198","199","DCP","200","201","202","204","205","206","208","209","213","214","216","217","221","222","224","225","228","229","230","232","233","234","235","236","237","238","239","ISC","240","241","245","246","247","248","249","253","254","isPageCrossed","addr1","addr2","modes","_modes","defineProperty","cpu","pc","read16","x","b","y","a","read8","read16indirect","opcodes","_opcodes","c","v","setNegativeFlag","setZeroFlag","cycles","i","sp","stackPull8","write8","d","stackPush8","getFlags","stackPush16","z","n","setFlags","stackPull16","tmpA","tmpX","tmpY","tmpC","CPU","memory","mapper","apu","ppu","controller","interrupt","_instructions","stallCounter","tmpCycles","instrCycles","instrCode","lastInstrCode","instrOpCode","instrMode","instrSize","obj","rom","err","Error","_this$_instructions$t","slicedToArray","console","log","lo","tmpOamAddress","oamAddress","oam","stall","flags","NameTable","data","mirrors","mode","parseInt","_resolve","PaletteTable","PPUMemory","paletteTable","nameTable","flush","mirrorType","PPU","cycle","cycleType","scanline","scanlineType","t","w","f","register","nmiOccurred","nmiOutput","backgroundTileBuffer","lowTileByte","highTileByte","attributeTableByte","spriteCount","sprites","Array","buffer","priority","index","registerRead","registerBuffer","fNameTable","fIncrement","fSpriteTable","fBackgroundTable","fSpriteSize","fMasterSlave","fGrayscale","fShowLeftBackground","fShowLeftSprites","fShowBackground","fShowSprites","fRedTint","fGreenTint","fBlueTint","fSpriteZeroHit","fSpriteOverflow","bufferedData","backgroundColor","spriteColor","spriteIndex","isBackgroundPixel","backgroundPixel","spritePixel","color","setRenderingMode","resetBuffers","frameReady","patternTable1","patternTable2","oamTable","patternTablesColors","frameBuffer","frameBackgroundBuffer","frameSpriteBuffer","frameColorBuffer","Uint32Array","_from","to","patternTable","lowTileData","highTileData","s","_parsePatternTable","tile","table","spriteSize","attributes","address","tileShiftX","tileShiftY","tableY","isReversedVertically","isReversedHorizontally","sprite","getSpriteSize","tileY","tileX","tileData","_RENDERING_MODES$NORM","renderingMode","normalRenderingMode","splitRenderingMode","cpuRead8","offset","pos","colorPos","setColorToBuffer","getCurrentBackgroundPixel","_ref","getCurrentSpritePixel","_ref2","length","push","row","readTileRow","fetchSpriteRow","shift","fineY","nameTableByte","fetchAndStoreBackgroundRow","updateScrollingX","updateScrollingY","clearVerticalBlank","tick","renderPixel","fetchAndStoreSpriteRows","setVerticalBlank","_cycleType","_scanlineType","doVBlankLine","doPreline","doVisibleLine","incrementCounters","BankMemory","windowSize","bankSize","swapMode","bankNbr","pointers","p","o","p1","p2","size","_to","Mapper","chr","prg","sram","NROM","_this","possibleConstructorReturn","getPrototypeOf","call","switchBank","warn","NAMETABLE_MIRRORS","MMC1_MIRRORS","2","MMC1","bufferIndex","conf","prgBankMode","chrBankMode","control","fixed","MMC3_MIRRORS","MMC3","bankRegister","irqCounter","irqLatch","irqEnable","setBankSize","isEven","UXROM","CNROM","ROM","dataBuffer","byteArray","header","subarray","nbrPRGBanks","nbrCHRBanks","mapperType","region","prgLength","chrLength","APU","Controller","buttons","strobe","document","addEventListener","keyDown","bind","keyUp","event","keyCode","preventDefault","_checkInput","isObject","item","isArray","Notifier","observers","obs","filter","e","forEach","notify","Throttle","fps","fpsInterval","now","elapsed","then","Date","Console","arguments","undefined","quickSaveData","connect","frameReq","frameThrottling","nesThrottling","frameNbr","opCodesKeys","keys","modeKeys","connectROM","reset","notifyObservers","JSON","parse","stringify","localStorage","quickSave","mergeDeep","target","_len","sources","_key","source","key","assign","apply","concat","_tick","requestAnimationFrame","frame","res","isThrottled","stop","tickDebug","cancelAnimationFrame","triggerNMI","triggerIRQ","acknowledgeFrame","Messages","props","getStyle","user","overflowY","opacity","determineVisualContent","content","scroll","splitContent","split","react_default","createElement","ref","vidRef","onLoadedMetadata","scrollToBottomVideo","controls","autoplay","src","alt","loadROM","start","clientNesRef","style","height","width","youtubeURL","replace","frameborder","allow","allowfullscreen","hoverOn","chatRef","hoverOff","scrollToBottom","scrollIntoView","behavior","block","addObserver","assertThisInitialized","_this2","onMouseEnter","onMouseLeave","chatItems","message","Component","Chat","chatMessages","map","components_Messages","id","SiteIntro","overlay","overlayRef","display","window","adsbygoogle","google_ad_client","enable_page_level_ads","href","onClick","className","data-ad-client","data-ad-slot","CreateMessage","state","onChange","setState","onSubmit","createMessage","position","bottom","type","name","flex","padding","placeholder","CanvasBackground","lineGradient","xEnd","yEnd","color1","color2","gradient","ctx","createLinearGradient","addColorStop","radialGradient","rad","radEnd","createRadialGradient","rand","end","Math","ceil","random","canvasSize","canvasRef","col_hex","fillcolor","stroke","strokecolor","border","int_pix","strokesize","rect","sizeX","sizeY","fillStyle","strokeStyle","lineWidth","beginPath","closePath","circle","radius","arc","PI","point","strokeSize","canvasBackgroundFill","stars","min","sun","water","onResize","innerWidth","innerHeight","createCanvasBackground","getContext","openpgp","path","publicKey","privateKey","pass","cryptoArray","crypto","getRandomValues","toString","options","userIds","email","numBits","passphrase","setItem","privateKeyArmored","publicKeyArmored","App","socketConnection","stream","socket","socketIOClient","toConsumableArray","on","createPeer","initiator","peer","emit","signal","initiaitorSocketId","socketid","submitButton","next","destroy","peerInfo","inConvo","navigator","mediaDevices","getUserMedia","video","audio","Peer","trickle","send","isPublicKey","peerPublicKey","asyncToGenerator","regenerator_default","mark","_callee","privKey","_options","wrap","_context","prev","readArmored","sent","decrypt","t0","t1","privateKeys","plaintext","newMessage","_x","peerStream","peerRef","srcObject","onloaddedmetadata","play","_callee2","_context2","fromText","publicKeys","ciphertext","_x2","_x3","clientRef","forceUpdate","_this3","components_SiteIntro","muted","class","components_Chat","submit","findUsers","components_CreateMessage","components_CanvasBackground","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.18ae7be4.chunk.js","sourcesContent":["/**\n * CPU RAM: 0x0000 => 0x2000\n */\nclass CPUMemory {\n  constructor() {\n    this.zp = new Uint8Array(256).fill(0xff);\n    this.stack = new Uint8Array(256).fill(0xff);\n    this.ram = new Uint8Array(1536).fill(0xff);\n  }\n\n  read8(addr) {\n    // 2k bits RAM\n    // mirrored 4 times\n    addr = addr % 0x800;\n\n    if (addr < 0x100) {\n      return this.zp[addr];\n    } else if (addr < 0x200) {\n      return this.stack[addr - 0x100];\n    } else {\n      return this.ram[addr - 0x200];\n    }\n  }\n\n  write8(addr, value) {\n    // 2k bits RAM\n    // mirrored 4 times\n    addr = addr % 0x800;\n\n    if (addr < 0x0100) {\n      this.zp[addr] = value;\n    } else if (addr < 0x0200) {\n      this.stack[addr - 0x100] = value;\n    } else {\n      this.ram[addr - 0x200] = value;\n    }\n  }\n}\n\nexport default CPUMemory;\n","export var RENDERING_MODES = {\n  NORMAL: 0,\n  SPLIT: 1\n};\n\nexport var MODES = {\n  ABSOLUTE: 0,\n  ABSOLUTE_X: 1,\n  ABSOLUTE_Y: 2,\n  ACCUMULATOR: 3,\n  IMMEDIATE: 4,\n  IMPLIED: 5,\n  INDEXED_INDIRECT_X: 6,\n  INDIRECT: 7,\n  INDIRECT_INDEXED_Y: 8,\n  RELATIVE: 9,\n  ZERO_PAGE: 10,\n  ZERO_PAGE_X: 11,\n  ZERO_PAGE_Y: 12\n};\n\nexport var OPCODES = {\n  ADC: 0,\n  AND: 1,\n  ASL: 2,\n  BCC: 3,\n  BCS: 4,\n  BEQ: 5,\n  BIT: 6,\n  BMI: 7,\n  BNE: 8,\n  BPL: 9,\n  BRK: 10,\n  BVC: 11,\n  BVS: 12,\n  CLC: 13,\n  CLD: 14,\n  CLI: 15,\n  CLV: 16,\n  CMP: 17,\n  CPX: 18,\n  CPY: 19,\n  DEC: 20,\n  DEX: 21,\n  DEY: 22,\n  EOR: 23,\n  INC: 24,\n  INX: 25,\n  INY: 26,\n  JMP: 27,\n  JSR: 28,\n  LDA: 29,\n  LDX: 30,\n  LDY: 31,\n  LSR: 32,\n  NOP: 33,\n  ORA: 34,\n  PHA: 35,\n  PHP: 36,\n  PLA: 37,\n  PLP: 38,\n  ROL: 39,\n  ROR: 40,\n  RTI: 41,\n  RTS: 42,\n  SBC: 43,\n  SEC: 44,\n  SED: 45,\n  SEI: 46,\n  STA: 47,\n  STX: 48,\n  STY: 49,\n  TAX: 50,\n  TAY: 51,\n  TSX: 52,\n  TXA: 53,\n  TXS: 54,\n  TYA: 55,\n\n  ASL_ACC: 56,\n  LSR_ACC: 57,\n  ROL_ACC: 58,\n  ROR_ACC: 59,\n\n  // TODO: Unused opcodes\n  SLO: 60\n};\n\nexport var INTERRUPTS = {\n  NMI: 0,\n  IRQ: 1\n};\n\nexport var KEYBOARD_KEYS = {\n  A: 67,\n  B: 88,\n  SELECT: 16,\n  START: 13,\n  UP: 38,\n  DOWN: 40,\n  LEFT: 37,\n  RIGHT: 39\n};\n\nexport var BUTTONS = {\n  A: 0,\n  B: 1,\n  SELECT: 2,\n  START: 3,\n  UP: 4,\n  DOWN: 5,\n  LEFT: 6,\n  RIGHT: 7\n};\n\nexport var COLORS = [\n  0x666666,\n  0x002a88,\n  0x1412a7,\n  0x3b00a4,\n  0x5c007e,\n  0x6e0040,\n  0x6c0600,\n  0x561d00,\n  0x333500,\n  0x0b4800,\n  0x005200,\n  0x004f08,\n  0x00404d,\n  0x000000,\n  0x000000,\n  0x000000,\n  0xadadad,\n  0x155fd9,\n  0x4240ff,\n  0x7527fe,\n  0xa01acc,\n  0xb71e7b,\n  0xb53120,\n  0x994e00,\n  0x6b6d00,\n  0x388700,\n  0x0c9300,\n  0x008f32,\n  0x007c8d,\n  0x000000,\n  0x000000,\n  0x000000,\n  0xfffeff,\n  0x64b0ff,\n  0x9290ff,\n  0xc676ff,\n  0xf36aff,\n  0xfe6ecc,\n  0xfe8170,\n  0xea9e22,\n  0xbcbe00,\n  0x88d800,\n  0x5ce430,\n  0x45e082,\n  0x48cdde,\n  0x4f4f4f,\n  0x000000,\n  0x000000,\n  0xfffeff,\n  0xc0dfff,\n  0xd3d2ff,\n  0xe8c8ff,\n  0xfbc2ff,\n  0xfec4ea,\n  0xfeccc5,\n  0xf7d8a5,\n  0xe4e594,\n  0xcfef96,\n  0xbdf4ab,\n  0xb3f3cc,\n  0xb5ebf2,\n  0xb8b8b8,\n  0x000000,\n  0x000000\n];\n\nexport var CYCLES = {\n  ZERO: 0,\n  ONE: 1,\n  PREFETCH: 2,\n  VISIBLE: 3,\n  SPRITES: 4,\n  COPY_Y: 5,\n  COPY_X: 6,\n  INCREMENT_Y: 7,\n  IDLE: 8,\n  FLUSH_TILEDATA: 9,\n  MAPPER_TICK: 10\n};\n\nexport var SCANLINES = {\n  PRELINE: 0,\n  VISIBLE: 1,\n  VBLANK: 2,\n  IDLE: 3\n};\n","import { OPCODES, MODES } from \"./constants.js\";\n\n// TODO: Non official instructions\nexport const instructions = {\n  0: [OPCODES.BRK, MODES.IMPLIED, 1, 7],\n  1: [OPCODES.ORA, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 2: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  3: [OPCODES.SLO, MODES.INDEXED_INDIRECT_X, 0, 8],\n  // 4: [ OPCODES.NOP, MODES.ZERO_PAGE, 2, 3 ],\n\n  5: [OPCODES.ORA, MODES.ZERO_PAGE, 2, 3],\n  6: [OPCODES.ASL, MODES.ZERO_PAGE, 2, 5],\n  7: [OPCODES.SLO, MODES.ZERO_PAGE, 0, 5],\n  8: [OPCODES.PHP, MODES.IMPLIED, 1, 3],\n  9: [OPCODES.ORA, MODES.IMMEDIATE, 2, 2],\n  10: [OPCODES.ASL_ACC, MODES.ACCUMULATOR, 1, 2],\n  // 11: [ OPCODES.ANC, MODES.IMMEDIATE, 0, 2 ],\n  // 12: [ OPCODES.NOP, MODES.ABSOLUTE, 3, 4 ],\n\n  13: [OPCODES.ORA, MODES.ABSOLUTE, 3, 4],\n  14: [OPCODES.ASL, MODES.ABSOLUTE, 3, 6],\n  15: [OPCODES.SLO, MODES.ABSOLUTE, 0, 6],\n  16: [OPCODES.BPL, MODES.RELATIVE, 2, 2],\n  17: [OPCODES.ORA, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 18: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  19: [OPCODES.SLO, MODES.INDIRECT_INDEXED_Y, 0, 8],\n  // 20: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  21: [OPCODES.ORA, MODES.ZERO_PAGE_X, 2, 4],\n  22: [OPCODES.ASL, MODES.ZERO_PAGE_X, 2, 6],\n  23: [OPCODES.SLO, MODES.ZERO_PAGE_X, 0, 6],\n  24: [OPCODES.CLC, MODES.IMPLIED, 1, 2],\n  25: [OPCODES.ORA, MODES.ABSOLUTE_Y, 3, 4],\n  // 26: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  27: [OPCODES.SLO, MODES.ABSOLUTE_Y, 0, 7],\n  // 28: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  29: [OPCODES.ORA, MODES.ABSOLUTE_X, 3, 4],\n  30: [OPCODES.ASL, MODES.ABSOLUTE_X, 3, 7],\n  31: [OPCODES.SLO, MODES.ABSOLUTE_X, 0, 7],\n  32: [OPCODES.JSR, MODES.ABSOLUTE, 3, 6],\n  33: [OPCODES.AND, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 34: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 35: [ OPCODES.RLA, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  36: [OPCODES.BIT, MODES.ZERO_PAGE, 2, 3],\n  37: [OPCODES.AND, MODES.ZERO_PAGE, 2, 3],\n  38: [OPCODES.ROL, MODES.ZERO_PAGE, 2, 5],\n  // 39: [ OPCODES.RLA, MODES.ZERO_PAGE, 0, 5 ],\n  40: [OPCODES.PLP, MODES.IMPLIED, 1, 4],\n  41: [OPCODES.AND, MODES.IMMEDIATE, 2, 2],\n  42: [OPCODES.ROL_ACC, MODES.ACCUMULATOR, 1, 2],\n  // 43: [ OPCODES.ANC, MODES.IMMEDIATE, 0, 2 ],\n  44: [OPCODES.BIT, MODES.ABSOLUTE, 3, 4],\n  45: [OPCODES.AND, MODES.ABSOLUTE, 3, 4],\n  46: [OPCODES.ROL, MODES.ABSOLUTE, 3, 6],\n  // 47: [ OPCODES.RLA, MODES.ABSOLUTE, 0, 6 ],\n  48: [OPCODES.BMI, MODES.RELATIVE, 2, 2],\n  49: [OPCODES.AND, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 50: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 51: [ OPCODES.RLA, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 52: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  53: [OPCODES.AND, MODES.ZERO_PAGE_X, 2, 4],\n  54: [OPCODES.ROL, MODES.ZERO_PAGE_X, 2, 6],\n  // 55: [ OPCODES.RLA, MODES.ZERO_PAGE_X, 0, 6 ],\n  56: [OPCODES.SEC, MODES.IMPLIED, 1, 2],\n  57: [OPCODES.AND, MODES.ABSOLUTE_Y, 3, 4],\n  // 58: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 59: [ OPCODES.RLA, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 60: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  61: [OPCODES.AND, MODES.ABSOLUTE_X, 3, 4],\n  62: [OPCODES.ROL, MODES.ABSOLUTE_X, 3, 7],\n  // 63: [ OPCODES.RLA, MODES.ABSOLUTE_X, 0, 7 ],\n  64: [OPCODES.RTI, MODES.IMPLIED, 1, 6],\n  65: [OPCODES.EOR, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 66: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 67: [ OPCODES.SRE, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  // 68: [ OPCODES.NOP, MODES.ZERO_PAGE, 2, 3 ],\n\n  69: [OPCODES.EOR, MODES.ZERO_PAGE, 2, 3],\n  70: [OPCODES.LSR, MODES.ZERO_PAGE, 2, 5],\n  // 71: [ OPCODES.SRE, MODES.ZERO_PAGE, 0, 5 ],\n  72: [OPCODES.PHA, MODES.IMPLIED, 1, 3],\n  73: [OPCODES.EOR, MODES.IMMEDIATE, 2, 2],\n  74: [OPCODES.LSR_ACC, MODES.ACCUMULATOR, 1, 2],\n  // 75: [ OPCODES.ALR, MODES.IMMEDIATE, 0, 2 ],\n  76: [OPCODES.JMP, MODES.ABSOLUTE, 3, 3],\n  77: [OPCODES.EOR, MODES.ABSOLUTE, 3, 4],\n  78: [OPCODES.LSR, MODES.ABSOLUTE, 3, 6],\n  // 79: [ OPCODES.SRE, MODES.ABSOLUTE, 0, 6 ],\n  80: [OPCODES.BVC, MODES.RELATIVE, 2, 2],\n  81: [OPCODES.EOR, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 82: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 83: [ OPCODES.SRE, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 84: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  85: [OPCODES.EOR, MODES.ZERO_PAGE_X, 2, 4],\n  86: [OPCODES.LSR, MODES.ZERO_PAGE_X, 2, 6],\n  // 87: [ OPCODES.SRE, MODES.ZERO_PAGE_X, 0, 6 ],\n  88: [OPCODES.CLI, MODES.IMPLIED, 1, 2],\n  89: [OPCODES.EOR, MODES.ABSOLUTE_Y, 3, 4],\n  // 90: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 91: [ OPCODES.SRE, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 92: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  93: [OPCODES.EOR, MODES.ABSOLUTE_X, 3, 4],\n  94: [OPCODES.LSR, MODES.ABSOLUTE_X, 3, 7],\n  // 95: [ OPCODES.SRE, MODES.ABSOLUTE_X, 0, 7 ],\n  96: [OPCODES.RTS, MODES.IMPLIED, 1, 6],\n  97: [OPCODES.ADC, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 98: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 99: [ OPCODES.RRA, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  // 100: [ OPCODES.NOP, MODES.ZERO_PAGE, 2, 3 ],\n\n  101: [OPCODES.ADC, MODES.ZERO_PAGE, 2, 3],\n  102: [OPCODES.ROR, MODES.ZERO_PAGE, 2, 5],\n  // 103: [ OPCODES.RRA, MODES.ZERO_PAGE, 0, 5 ],\n  104: [OPCODES.PLA, MODES.IMPLIED, 1, 4],\n  105: [OPCODES.ADC, MODES.IMMEDIATE, 2, 2],\n  106: [OPCODES.ROR_ACC, MODES.ACCUMULATOR, 1, 2],\n  // 107: [ OPCODES.ARR, MODES.IMMEDIATE, 0, 2 ],\n  108: [OPCODES.JMP, MODES.INDIRECT, 3, 5],\n  109: [OPCODES.ADC, MODES.ABSOLUTE, 3, 4],\n  110: [OPCODES.ROR, MODES.ABSOLUTE, 3, 6],\n  // 111: [ OPCODES.RRA, MODES.ABSOLUTE, 0, 6 ],\n  112: [OPCODES.BVS, MODES.RELATIVE, 2, 2],\n  113: [OPCODES.ADC, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 114: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 115: [ OPCODES.RRA, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 116: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  117: [OPCODES.ADC, MODES.ZERO_PAGE_X, 2, 4],\n  118: [OPCODES.ROR, MODES.ZERO_PAGE_X, 2, 6],\n  // 119: [ OPCODES.RRA, MODES.ZERO_PAGE_X, 0, 6 ],\n  120: [OPCODES.SEI, MODES.IMPLIED, 1, 2],\n  121: [OPCODES.ADC, MODES.ABSOLUTE_Y, 3, 4],\n  // 122: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 123: [ OPCODES.RRA, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 124: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  125: [OPCODES.ADC, MODES.ABSOLUTE_X, 3, 4],\n  126: [OPCODES.ROR, MODES.ABSOLUTE_X, 3, 7],\n  // 127: [ OPCODES.RRA, MODES.ABSOLUTE_X, 0, 7 ],\n  // 128: [ OPCODES.NOP, MODES.IMMEDIATE, 2, 2 ],\n\n  129: [OPCODES.STA, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 130: [ OPCODES.NOP, MODES.IMMEDIATE, 0, 2 ],\n\n  // 131: [ OPCODES.SAX, MODES.INDEXED_INDIRECT_X, 0, 6 ],\n  132: [OPCODES.STY, MODES.ZERO_PAGE, 2, 3],\n  133: [OPCODES.STA, MODES.ZERO_PAGE, 2, 3],\n  134: [OPCODES.STX, MODES.ZERO_PAGE, 2, 3],\n  // 135: [ OPCODES.SAX, MODES.ZERO_PAGE, 0, 3 ],\n  136: [OPCODES.DEY, MODES.IMPLIED, 1, 2],\n  // 137: [ OPCODES.NOP, MODES.IMMEDIATE, 0, 2 ],\n\n  138: [OPCODES.TXA, MODES.IMPLIED, 1, 2],\n  // 139: [ OPCODES.XAA, MODES.IMMEDIATE, 0, 2 ],\n  140: [OPCODES.STY, MODES.ABSOLUTE, 3, 4],\n  141: [OPCODES.STA, MODES.ABSOLUTE, 3, 4],\n  142: [OPCODES.STX, MODES.ABSOLUTE, 3, 4],\n  // 143: [ OPCODES.SAX, MODES.ABSOLUTE, 0, 4 ],\n  144: [OPCODES.BCC, MODES.RELATIVE, 2, 2],\n  145: [OPCODES.STA, MODES.INDIRECT_INDEXED_Y, 2, 6],\n  // 146: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 147: [ OPCODES.AHX, MODES.INDIRECT_INDEXED_Y, 0, 6 ],\n  148: [OPCODES.STY, MODES.ZERO_PAGE_X, 2, 4],\n  149: [OPCODES.STA, MODES.ZERO_PAGE_X, 2, 4],\n  150: [OPCODES.STX, MODES.ZERO_PAGE_Y, 2, 4],\n  // 151: [ OPCODES.SAX, MODES.ZERO_PAGE_Y, 0, 4 ],\n  152: [OPCODES.TYA, MODES.IMPLIED, 1, 2],\n  153: [OPCODES.STA, MODES.ABSOLUTE_Y, 3, 5],\n  154: [OPCODES.TXS, MODES.IMPLIED, 1, 2],\n  // 155: [ OPCODES.TAS, MODES.ABSOLUTE_Y, 0, 5 ],\n  // 156: [ OPCODES.SHY, MODES.ABSOLUTE_X, 0, 5 ],\n  157: [OPCODES.STA, MODES.ABSOLUTE_X, 3, 5],\n  // 158: [ OPCODES.SHX, MODES.ABSOLUTE_Y, 0, 5 ],\n  // 159: [ OPCODES.AHX, MODES.ABSOLUTE_Y, 0, 5 ],\n  160: [OPCODES.LDY, MODES.IMMEDIATE, 2, 2],\n  161: [OPCODES.LDA, MODES.INDEXED_INDIRECT_X, 2, 6],\n  162: [OPCODES.LDX, MODES.IMMEDIATE, 2, 2],\n  // 163: [ OPCODES.LAX, MODES.INDEXED_INDIRECT_X, 0, 6 ],\n  164: [OPCODES.LDY, MODES.ZERO_PAGE, 2, 3],\n  165: [OPCODES.LDA, MODES.ZERO_PAGE, 2, 3],\n  166: [OPCODES.LDX, MODES.ZERO_PAGE, 2, 3],\n  // 167: [ OPCODES.LAX, MODES.ZERO_PAGE, 0, 3 ],\n  168: [OPCODES.TAY, MODES.IMPLIED, 1, 2],\n  169: [OPCODES.LDA, MODES.IMMEDIATE, 2, 2],\n  170: [OPCODES.TAX, MODES.IMPLIED, 1, 2],\n  // 171: [ OPCODES.LAX, MODES.IMMEDIATE, 0, 2 ],\n  172: [OPCODES.LDY, MODES.ABSOLUTE, 3, 4],\n  173: [OPCODES.LDA, MODES.ABSOLUTE, 3, 4],\n  174: [OPCODES.LDX, MODES.ABSOLUTE, 3, 4],\n  // 175: [ OPCODES.LAX, MODES.ABSOLUTE, 0, 4 ],\n  176: [OPCODES.BCS, MODES.RELATIVE, 2, 2],\n  177: [OPCODES.LDA, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 178: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 179: [ OPCODES.LAX, MODES.INDIRECT_INDEXED_Y, 0, 5 ],\n  180: [OPCODES.LDY, MODES.ZERO_PAGE_X, 2, 4],\n  181: [OPCODES.LDA, MODES.ZERO_PAGE_X, 2, 4],\n  182: [OPCODES.LDX, MODES.ZERO_PAGE_Y, 2, 4],\n  // 183: [ OPCODES.LAX, MODES.ZERO_PAGE_Y, 0, 4 ],\n  184: [OPCODES.CLV, MODES.IMPLIED, 1, 2],\n  185: [OPCODES.LDA, MODES.ABSOLUTE_Y, 3, 4],\n  186: [OPCODES.TSX, MODES.IMPLIED, 1, 2],\n  // 187: [ OPCODES.LAS, MODES.ABSOLUTE_Y, 0, 4 ],\n  188: [OPCODES.LDY, MODES.ABSOLUTE_X, 3, 4],\n  189: [OPCODES.LDA, MODES.ABSOLUTE_X, 3, 4],\n  190: [OPCODES.LDX, MODES.ABSOLUTE_Y, 3, 4],\n  // 191: [ OPCODES.LAX, MODES.ABSOLUTE_Y, 0, 4 ],\n  192: [OPCODES.CPY, MODES.IMMEDIATE, 2, 2],\n  193: [OPCODES.CMP, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 194: [ OPCODES.NOP, MODES.IMMEDIATE, 0, 2 ],\n\n  // 195: [ OPCODES.DCP, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  196: [OPCODES.CPY, MODES.ZERO_PAGE, 2, 3],\n  197: [OPCODES.CMP, MODES.ZERO_PAGE, 2, 3],\n  198: [OPCODES.DEC, MODES.ZERO_PAGE, 2, 5],\n  199: [OPCODES.DCP, MODES.ZERO_PAGE, 0, 5],\n  200: [OPCODES.INY, MODES.IMPLIED, 1, 2],\n  201: [OPCODES.CMP, MODES.IMMEDIATE, 2, 2],\n  202: [OPCODES.DEX, MODES.IMPLIED, 1, 2],\n  // 203: [ OPCODES.AXS, MODES.IMMEDIATE, 0, 2 ],\n  204: [OPCODES.CPY, MODES.ABSOLUTE, 3, 4],\n  205: [OPCODES.CMP, MODES.ABSOLUTE, 3, 4],\n  206: [OPCODES.DEC, MODES.ABSOLUTE, 3, 6],\n  // 207: [ OPCODES.DCP, MODES.ABSOLUTE, 0, 6 ],\n  208: [OPCODES.BNE, MODES.RELATIVE, 2, 2],\n  209: [OPCODES.CMP, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 210: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 211: [ OPCODES.DCP, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 212: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  213: [OPCODES.CMP, MODES.ZERO_PAGE_X, 2, 4],\n  214: [OPCODES.DEC, MODES.ZERO_PAGE_X, 2, 6],\n  // 215: [ OPCODES.DCP, MODES.ZERO_PAGE_X, 0, 6 ],\n  216: [OPCODES.CLD, MODES.IMPLIED, 1, 2],\n  217: [OPCODES.CMP, MODES.ABSOLUTE_Y, 3, 4],\n  // 218: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 219: [ OPCODES.DCP, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 220: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  221: [OPCODES.CMP, MODES.ABSOLUTE_X, 3, 4],\n  222: [OPCODES.DEC, MODES.ABSOLUTE_X, 3, 7],\n  // 223: [ OPCODES.DCP, MODES.ABSOLUTE_X, 0, 7 ],\n  224: [OPCODES.CPX, MODES.IMMEDIATE, 2, 2],\n  225: [OPCODES.SBC, MODES.INDEXED_INDIRECT_X, 2, 6],\n  // 226: [ OPCODES.NOP, MODES.IMMEDIATE, 0, 2 ],\n\n  // 227: [ OPCODES.ISC, MODES.INDEXED_INDIRECT_X, 0, 8 ],\n  228: [OPCODES.CPX, MODES.ZERO_PAGE, 2, 3],\n  229: [OPCODES.SBC, MODES.ZERO_PAGE, 2, 3],\n  230: [OPCODES.INC, MODES.ZERO_PAGE, 2, 5],\n  // 231: [ OPCODES.ISC, MODES.ZERO_PAGE, 0, 5 ],\n  232: [OPCODES.INX, MODES.IMPLIED, 1, 2],\n  233: [OPCODES.SBC, MODES.IMMEDIATE, 2, 2],\n  234: [OPCODES.NOP, MODES.IMPLIED, 1, 2],\n\n  235: [OPCODES.SBC, MODES.IMMEDIATE, 2, 2],\n  236: [OPCODES.CPX, MODES.ABSOLUTE, 3, 4],\n  237: [OPCODES.SBC, MODES.ABSOLUTE, 3, 4],\n  238: [OPCODES.INC, MODES.ABSOLUTE, 3, 6],\n  239: [OPCODES.ISC, MODES.ABSOLUTE, 0, 6],\n  240: [OPCODES.BEQ, MODES.RELATIVE, 2, 2],\n  241: [OPCODES.SBC, MODES.INDIRECT_INDEXED_Y, 2, 5],\n  // 242: [ OPCODES.KIL, MODES.IMPLIED, 0, 2 ],\n  // 243: [ OPCODES.ISC, MODES.INDIRECT_INDEXED_Y, 0, 8 ],\n  // 244: [ OPCODES.NOP, MODES.ZERO_PAGE_X, 2, 4 ],\n\n  245: [OPCODES.SBC, MODES.ZERO_PAGE_X, 2, 4],\n  246: [OPCODES.INC, MODES.ZERO_PAGE_X, 2, 6],\n  247: [OPCODES.ISC, MODES.ZERO_PAGE_X, 0, 6],\n  248: [OPCODES.SED, MODES.IMPLIED, 1, 2],\n  249: [OPCODES.SBC, MODES.ABSOLUTE_Y, 3, 4],\n  // 250: [ OPCODES.NOP, MODES.IMPLIED, 1, 2 ],\n\n  // 251: [ OPCODES.ISC, MODES.ABSOLUTE_Y, 0, 7 ],\n  // 252: [ OPCODES.NOP, MODES.ABSOLUTE_X, 3, 4 ],\n\n  253: [OPCODES.SBC, MODES.ABSOLUTE_X, 3, 4],\n  254: [OPCODES.INC, MODES.ABSOLUTE_X, 3, 7]\n  // 255: [ OPCODES.ISC, MODES.ABSOLUTE_X, 0, 7 ]\n};\n","export function isPageCrossed(addr1, addr2) {\n  // A page is crossed when the high byte differs from addr1 to addr2\n  return addr1 >> 8 !== addr2 >> 8;\n}\n","import { MODES } from \"./constants.js\";\n\nimport { isPageCrossed } from \"./utils.js\";\n\n/**\n *   Computes and returns a memory address (max 16bit)\n *   http://wiki.nesdev.com/w/index.php/CPU_addressing_modes\n */\nexport var modes = {\n  [MODES.IMMEDIATE]: cpu => {\n    return cpu.pc + 1;\n  },\n  [MODES.ABSOLUTE]: cpu => {\n    return cpu.read16(cpu.pc + 1);\n  },\n  [MODES.ABSOLUTE_X]: cpu => {\n    var addr = (cpu.read16(cpu.pc + 1) + cpu.x) & 0xffff;\n\n    if (isPageCrossed(addr - cpu.x, addr)) {\n      cpu.b = 1;\n    }\n\n    return addr;\n  },\n  [MODES.ABSOLUTE_Y]: cpu => {\n    var addr = (cpu.read16(cpu.pc + 1) + cpu.y) & 0xffff;\n\n    if (isPageCrossed(addr - cpu.y, addr)) {\n      cpu.b = 1;\n    }\n\n    return addr;\n  },\n  [MODES.ACCUMULATOR]: cpu => {\n    return cpu.a;\n  },\n  [MODES.IMPLIED]: cpu => {\n    return 0;\n  },\n  [MODES.RELATIVE]: cpu => {\n    var addr = cpu.read8(cpu.pc + 1);\n\n    if (addr < 0x80) {\n      return addr + cpu.pc + 2;\n    } else {\n      return addr + cpu.pc + 2 - 0x100;\n    }\n  },\n  [MODES.ZERO_PAGE_Y]: cpu => {\n    return (cpu.read8(cpu.pc + 1) + cpu.y) & 0xff;\n  },\n  [MODES.ZERO_PAGE_X]: cpu => {\n    return (cpu.read8(cpu.pc + 1) + cpu.x) & 0xff;\n  },\n  [MODES.ZERO_PAGE]: cpu => {\n    return cpu.read8(cpu.pc + 1);\n  },\n  [MODES.INDEXED_INDIRECT_X]: cpu => {\n    return cpu.read16indirect((cpu.read8(cpu.pc + 1) + cpu.x) & 0xff);\n  },\n  [MODES.INDIRECT_INDEXED_Y]: cpu => {\n    var addr = (cpu.read16indirect(cpu.read8(cpu.pc + 1)) + cpu.y) & 0xffff;\n\n    if (isPageCrossed(addr - cpu.y, addr)) {\n      cpu.b = 1;\n    }\n\n    return addr;\n  },\n  // TODO: Indirect jump is bugged on the NES, dig/adapt\n  [MODES.INDIRECT]: cpu => {\n    return cpu.read16indirect(cpu.read16(cpu.pc + 1));\n  }\n};\n","import { OPCODES } from \"./constants.js\";\n\nimport { isPageCrossed } from \"./utils.js\";\n\nexport const opcodes = {\n  /**\n   *     http://obelisk.me.uk/6502/reference.html\n   */\n\n  // Add with Carry\n  [OPCODES.ADC]: (addr, cpu) => {\n    let a = cpu.a;\n    let value = cpu.read8(addr);\n    cpu.a = a + value + cpu.c;\n\n    if (cpu.a > 0xff) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    cpu.a = cpu.a & 0xff;\n\n    // Overflow is set if > 127 or < -128\n    if ((a ^ cpu.a) & (value ^ cpu.a) & 0x80) {\n      cpu.v = 1;\n    } else {\n      cpu.v = 0;\n    }\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Set Interrupt Disable\n  [OPCODES.SEI]: (addr, cpu) => {\n    cpu.i = 1;\n  },\n\n  // Clear Carry Flag\n  [OPCODES.CLC]: (addr, cpu) => {\n    cpu.c = 0;\n  },\n\n  // Clear Overflow Flag\n  [OPCODES.CLV]: (addr, cpu) => {\n    cpu.v = 0;\n  },\n\n  // Transfer Stack pointer to X\n  [OPCODES.TSX]: (addr, cpu) => {\n    cpu.x = cpu.sp;\n    cpu.setNegativeFlag(cpu.x);\n    cpu.setZeroFlag(cpu.x);\n  },\n\n  // Transfer Accumulator to X\n  [OPCODES.TAX]: (addr, cpu) => {\n    cpu.x = cpu.a;\n    cpu.setNegativeFlag(cpu.x);\n    cpu.setZeroFlag(cpu.x);\n  },\n\n  // Pull Accumulator\n  [OPCODES.PLA]: (addr, cpu) => {\n    cpu.a = cpu.stackPull8();\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Decrement Memory\n  [OPCODES.DEC]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n    value = (value - 1) & 0xff;\n\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n    cpu.write8(addr, value);\n  },\n\n  // Decrement Y Register\n  [OPCODES.DEY]: (addr, cpu) => {\n    cpu.y = (cpu.y - 1) & 0xff;\n    cpu.setNegativeFlag(cpu.y);\n    cpu.setZeroFlag(cpu.y);\n  },\n\n  // Decrement X Register\n  [OPCODES.DEX]: (addr, cpu) => {\n    cpu.x = (cpu.x - 1) & 0xff;\n    cpu.setZeroFlag(cpu.x);\n    cpu.setNegativeFlag(cpu.x);\n  },\n\n  // Transfer X to Stack Pointer\n  [OPCODES.TXS]: (addr, cpu) => {\n    cpu.sp = cpu.x;\n  },\n\n  // Transfer X to A\n  [OPCODES.TXA]: (addr, cpu) => {\n    cpu.a = cpu.x;\n    cpu.setZeroFlag(cpu.a);\n    cpu.setNegativeFlag(cpu.a);\n  },\n\n  // Clear Decimal Mode\n  [OPCODES.CLD]: (addr, cpu) => {\n    cpu.d = 0;\n  },\n\n  // Push Processor Status\n  [OPCODES.PHP]: (addr, cpu) => {\n    cpu.stackPush8(cpu.getFlags() | 0x10);\n  },\n\n  // Force Interrupt\n  // TODO: http://nesdev.com/the%20'B'%20flag%20&%20BRK%20instruction.txt\n  [OPCODES.BRK]: (addr, cpu) => {\n    cpu.stackPush16(cpu.pc + 1);\n    // PHP\n    cpu.stackPush8(cpu.getFlags() | 0x18);\n    // SEI\n    cpu.i = 1;\n    cpu.pc = cpu.read16(0xfffe);\n  },\n\n  // Jump to subroutine\n  [OPCODES.JSR]: (addr, cpu) => {\n    cpu.stackPush16(cpu.pc - 1);\n    cpu.pc = addr & 0xffff;\n  },\n\n  // Branch if Overflow clear\n  [OPCODES.BVC]: (addr, cpu) => {\n    if (cpu.v === 0) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Overflow set\n  [OPCODES.BVS]: (addr, cpu) => {\n    if (cpu.v === 1) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Equal\n  [OPCODES.BEQ]: (addr, cpu) => {\n    if (cpu.z === 1) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Carry Set\n  [OPCODES.BCS]: (addr, cpu) => {\n    if (cpu.c === 1) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Not Equal\n  [OPCODES.BNE]: (addr, cpu) => {\n    if (cpu.z === 0) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Carry Clear\n  [OPCODES.BCC]: (addr, cpu) => {\n    if (cpu.c === 0) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Positive\n  [OPCODES.BPL]: (addr, cpu) => {\n    if (cpu.n === 0) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Branch if Minus\n  [OPCODES.BMI]: (addr, cpu) => {\n    if (cpu.n === 1) {\n      cpu.cycles += isPageCrossed(cpu.pc, addr) ? 2 : 1;\n      cpu.pc = addr & 0xffff;\n    }\n  },\n\n  // Set Decimal Flag\n  [OPCODES.SED]: (addr, cpu) => {\n    cpu.d = 1;\n  },\n\n  // Set Carry Flag\n  [OPCODES.SEC]: (addr, cpu) => {\n    cpu.c = 1;\n  },\n\n  // Return from Interrupt\n  [OPCODES.RTI]: (addr, cpu) => {\n    cpu.setFlags(cpu.stackPull8() | 0x20);\n    cpu.pc = cpu.stackPull16();\n  },\n\n  // Logical AND\n  [OPCODES.AND]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n    cpu.a = cpu.a & value;\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Transfer Accumulator to Y\n  [OPCODES.TAY]: (addr, cpu) => {\n    cpu.y = cpu.a;\n    cpu.setNegativeFlag(cpu.y);\n    cpu.setZeroFlag(cpu.y);\n  },\n\n  // Load Accumulator\n  [OPCODES.LDA]: (addr, cpu) => {\n    cpu.a = cpu.read8(addr);\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Load Y Register\n  [OPCODES.LDY]: (addr, cpu) => {\n    cpu.y = cpu.read8(addr);\n    cpu.setNegativeFlag(cpu.y);\n    cpu.setZeroFlag(cpu.y);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Load X Register\n  [OPCODES.LDX]: (addr, cpu) => {\n    cpu.x = cpu.read8(addr);\n    cpu.setNegativeFlag(cpu.x);\n    cpu.setZeroFlag(cpu.x);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Store X Register\n  [OPCODES.STX]: (addr, cpu) => {\n    cpu.write8(addr, cpu.x);\n  },\n\n  // Store Y Register\n  [OPCODES.STY]: (addr, cpu) => {\n    cpu.write8(addr, cpu.y);\n  },\n\n  // Store Accumulator\n  [OPCODES.STA]: (addr, cpu) => {\n    cpu.write8(addr, cpu.a);\n  },\n\n  // Compare\n  [OPCODES.CMP]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n    let tmpA = cpu.a - value;\n\n    if (cpu.a >= value) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    cpu.setNegativeFlag(tmpA);\n    cpu.setZeroFlag(tmpA);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Compare X Register\n  [OPCODES.CPX]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n    let tmpX = cpu.x - value;\n\n    if (cpu.x >= value) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    cpu.setNegativeFlag(tmpX);\n    cpu.setZeroFlag(tmpX);\n  },\n\n  // Compare Y Register\n  [OPCODES.CPY]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n    let tmpY = cpu.y - value;\n\n    if (cpu.y >= value) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    cpu.setNegativeFlag(tmpY);\n    cpu.setZeroFlag(tmpY);\n  },\n\n  // Arithmetic Shift Left (Accumulator Mode)\n  [OPCODES.ASL_ACC]: (addr, cpu) => {\n    cpu.c = (cpu.a >> 7) & 1;\n    cpu.a = (cpu.a << 1) & 0xff;\n\n    cpu.setZeroFlag(cpu.a);\n    cpu.setNegativeFlag(cpu.a);\n  },\n\n  // Arithmetic Shift Left\n  [OPCODES.ASL]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n\n    cpu.c = (value >> 7) & 1;\n    value = (value << 1) & 0xff;\n\n    cpu.setZeroFlag(value);\n    cpu.setNegativeFlag(value);\n    cpu.write8(addr, value);\n  },\n\n  // Subtract with Carry\n  [OPCODES.SBC]: (addr, cpu) => {\n    let a = cpu.a;\n    let value = cpu.read8(addr);\n    let c = cpu.c;\n\n    cpu.a = (cpu.a - value - (1 - cpu.c)) & 0xff;\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    if (a - value - (1 - c) >= 0) {\n      cpu.c = 1;\n    } else {\n      cpu.c = 0;\n    }\n\n    if ((a ^ cpu.a) & (value ^ cpu.a) & 0x80) {\n      cpu.v = 1;\n    } else {\n      cpu.v = 0;\n    }\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Exclusive OR\n  [OPCODES.EOR]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n    cpu.a = (cpu.a ^ value) & 0xff;\n\n    cpu.setZeroFlag(cpu.a);\n    cpu.setNegativeFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Return From Subroutine\n  [OPCODES.RTS]: (addr, cpu) => {\n    cpu.pc = cpu.stackPull16() + 1;\n  },\n\n  // Increment Y Register\n  [OPCODES.INY]: (addr, cpu) => {\n    cpu.y = (cpu.y + 1) & 0xff;\n    cpu.setNegativeFlag(cpu.y);\n    cpu.setZeroFlag(cpu.y);\n  },\n\n  // Increment X Register\n  [OPCODES.INX]: (addr, cpu) => {\n    cpu.x = (cpu.x + 1) & 0xff;\n    cpu.setNegativeFlag(cpu.x);\n    cpu.setZeroFlag(cpu.x);\n  },\n\n  // Increment Memory\n  [OPCODES.INC]: (addr, cpu) => {\n    let value = (cpu.read8(addr) + 1) & 0xff;\n\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n\n    cpu.write8(addr, value);\n  },\n\n  // Push Accumulator\n  [OPCODES.PHA]: (addr, cpu) => {\n    cpu.stackPush8(cpu.a);\n  },\n\n  // Pull Processor Status\n  [OPCODES.PLP]: (addr, cpu) => {\n    cpu.setFlags((cpu.stackPull8() & 0xef) | 0x20);\n  },\n\n  // Logical Inclusive OR\n  [OPCODES.ORA]: (addr, cpu) => {\n    cpu.a = cpu.a | cpu.read8(addr);\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n\n    cpu.cycles += cpu.b;\n  },\n\n  // Logical Shift Right (Accumulator Mode)\n  [OPCODES.LSR_ACC]: (addr, cpu) => {\n    cpu.c = cpu.a & 1;\n    cpu.a = cpu.a >> 1;\n\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Logical Shift Right\n  [OPCODES.LSR]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n\n    cpu.c = value & 1;\n    value = value >> 1;\n\n    cpu.write8(addr, value);\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n  },\n\n  // Transfer Y to Accumulator\n  [OPCODES.TYA]: (addr, cpu) => {\n    cpu.a = cpu.y;\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Rotate Left (Accumulator)\n  [OPCODES.ROL_ACC]: (addr, cpu) => {\n    let tmpC = cpu.c;\n\n    cpu.c = (cpu.a >> 7) & 1;\n    cpu.a = ((cpu.a << 1) & 0xff) | tmpC;\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Rotate Left\n  [OPCODES.ROL]: (addr, cpu) => {\n    let tmpC = cpu.c;\n    let value = cpu.read8(addr);\n\n    cpu.c = (value >> 7) & 1;\n    value = ((value << 1) & 0xff) | tmpC;\n\n    cpu.write8(addr, value);\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n  },\n\n  // Rotate Right (Accumulator)\n  [OPCODES.ROR_ACC]: (addr, cpu) => {\n    let tmpC = cpu.c;\n\n    cpu.c = cpu.a & 1;\n    cpu.a = (cpu.a >> 1) + (tmpC << 7);\n    cpu.setNegativeFlag(cpu.a);\n    cpu.setZeroFlag(cpu.a);\n  },\n\n  // Rotate Right\n  [OPCODES.ROR]: (addr, cpu) => {\n    let tmpC = cpu.c;\n    let value = cpu.read8(addr);\n\n    cpu.c = value & 1;\n    value = (value >> 1) + (tmpC << 7);\n\n    cpu.write8(addr, value);\n    cpu.setNegativeFlag(value);\n    cpu.setZeroFlag(value);\n  },\n\n  // Bit Test\n  [OPCODES.BIT]: (addr, cpu) => {\n    let value = cpu.read8(addr);\n    cpu.v = (value >> 6) & 1;\n    cpu.setZeroFlag(value & cpu.a);\n    cpu.setNegativeFlag(value);\n  },\n\n  // Jump\n  // FIXME https://github.com/christopherpow/nes-test-roms/blob/master/stress/NEStress.txt#L141\n  [OPCODES.JMP]: (addr, cpu) => {\n    cpu.pc = addr & 0xffff;\n  },\n\n  // Clear Interrupt Disable\n  [OPCODES.CLI]: (addr, cpu) => {\n    cpu.i = 0;\n  },\n\n  // Nope\n  [OPCODES.NOP]: (addr, cpu) => {},\n\n  // SLO\n  // [ OPCODES.SLO ]: ( addr, cpu ) => {},\n\n  // SLO\n  [OPCODES.ISC]: (addr, cpu) => {}\n};\n","import CPUMemory from \"../core/CPUMemory\";\n\nimport { INTERRUPTS } from \"./constants.js\";\n\nimport { instructions } from \"./instructions.js\";\n\nimport { modes } from \"./modes.js\";\n\nimport { opcodes } from \"./opcodes.js\";\n\nclass CPU {\n  constructor() {\n    // Hardware connected to CPU\n    this.memory = new CPUMemory();\n    this.mapper = null;\n    this.apu = null;\n    this.ppu = null;\n    this.controller = null;\n\n    // Cycles Counter\n    this.cycles = 0;\n    // Branch counter used by some opcodes for extra cycles\n    // when pages are crossed\n    this.b = 0;\n\n    // Program Counter\n    this.pc = 0x00;\n    // Stack Pointer\n    this.sp = 0x00;\n\n    // Registers\n    this.a = 0;\n    this.x = 0;\n    this.y = 0;\n\n    // Flags\n    this.c = 0; // Carry flag\n    this.z = 0; // Zero flag\n    this.i = 0; // Interrupt flag\n    this.d = 0; // Decimal flag\n    // Break flag\n    this.v = 0; // Overflow flag\n    this.n = 0; // Negative flag\n    // Unused flag\n\n    // Interrupt type\n    this.interrupt = null;\n\n    this._modes = modes;\n    this._instructions = instructions;\n    this._opcodes = opcodes;\n\n    this.stallCounter = 0;\n\n    // Tick variables\n    this.tmpCycles = 0;\n    this.instrCycles = 0;\n    this.instrCode = 0;\n    this.lastInstrCode = 0;\n    this.instrOpCode = 0;\n    this.instrMode = 0;\n    this.instrSize = 0;\n    this.addr = 0;\n  }\n\n  loadJSON(obj) {}\n\n  connect(apu, ppu, controller) {\n    this.apu = apu;\n    this.ppu = ppu;\n    this.controller = controller;\n  }\n\n  connectROM(rom) {\n    // Improve that\n    // this.mapper = rom.mapper;\n    // this.mapper.cpu = this;\n  }\n\n  stall() {\n    if (this.cycles % 2 === 1) {\n      this.stallCounter += 514;\n    } else {\n      this.stallCounter += 513;\n    }\n  }\n\n  reset() {\n    this.cycles = 0;\n    this.a = 0;\n    this.x = 0;\n    this.y = 0;\n    this.interrupt = null;\n    this.stallCounter = 0;\n    this.pc = this.read16(0xfffc);\n    this.sp = 0xfd;\n    this.setFlags(0x24);\n  }\n\n  tick() {\n    this.tmpCycles = this.cycles;\n    this.b = 0;\n\n    // Stalled after PPU OAMDMA\n    if (this.stallCounter > 0) {\n      this.stallCounter--;\n      // Should return 1 but this somehow fixes some games.\n      // Probably due to CPU being not exactly accurate\n      // ¯\\_(ツ)_/¯\n      return 0;\n    }\n\n    // TODO Not DRY\n    if (this.interrupt !== null) {\n      switch (this.interrupt) {\n        case INTERRUPTS.NMI: {\n          this.stackPush16(this.pc);\n          this.stackPush8(this.getFlags() & ~0x10);\n          this.pc = this.read16(0xfffa);\n          this.i = 1;\n          this.cycles += 7;\n          break;\n        }\n        case INTERRUPTS.IRQ: {\n          if (this.i === 0) {\n            this.stackPush16(this.pc);\n            this.stackPush8(this.getFlags() & ~0x10);\n            this.pc = this.read16(0xfffe);\n            this.i = 1;\n            this.cycles += 7;\n          }\n          break;\n        }\n      }\n\n      this.interrupt = null;\n\n      return 7;\n    }\n\n    try {\n      this.instrCode = this.read8(this.pc);\n    } catch (err) {\n      throw new Error(\"Could not read next instruction: \" + err);\n    }\n\n    // 0xFF is not implemented as an instruction,\n    // if RTI is called mutliple times\n    if (\n      this.instrCode === 0xff ||\n      (this.instrCode === 64 && this.instrCode === this.lastInstrCode)\n    ) {\n      return -1;\n    }\n\n    [\n      this.instrOpCode,\n      this.instrMode,\n      this.instrSize,\n      this.instrCycles\n    ] = this._instructions[this.instrCode];\n\n    this.addr = this._modes[this.instrMode](this);\n\n    this.pc += this.instrSize;\n    this.cycles += this.instrCycles;\n\n    this._opcodes[this.instrOpCode](this.addr, this);\n\n    // Save the last executed instrCode to prevent infinite loop of RTI (when testing)\n    this.lastInstrCode = this.instrCode;\n\n    return this.cycles - this.tmpCycles;\n  }\n\n  /**\n   * Interrupts\n   */\n  triggerNMI() {\n    this.interrupt = INTERRUPTS.NMI;\n  }\n\n  triggerIRQ() {\n    this.interrupt = INTERRUPTS.IRQ;\n  }\n\n  /**\n   * Read & Write methods\n   *\n   * CPU RAM: 0x0000 => 0x2000\n   * PPU Registers: 0x2000 => 0x4000\n   * Controller: 0x4016\n   * Controller2: 0x4016\n   * ROM Mapper: 0x6000 => 0x10000\n   */\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.memory.read8(addr);\n    } else if (addr < 0x4000) {\n      // 7 bytes PPU registers\n      // mirrored from 0x2000 to 0x4000\n      return this.ppu.read8(0x2000 + (addr % 8));\n    } else if (addr === 0x4014) {\n      return this.ppu.read8(addr);\n    } else if (addr === 0x4015) {\n      return this.apu.read8();\n    } else if (addr === 0x4016) {\n      return this.controller.read8();\n    } else if (addr === 0x4017) {\n      return 0;\n    } else if (addr < 0x6000) {\n      console.log(\"I/O REGISTERS\");\n      return 0;\n    } else {\n      return this.ppu.memory.mapper.read8(addr);\n    }\n  }\n\n  read16(addr) {\n    // Read two bytes and concatenate them\n    return (this.read8(addr + 1) << 8) | this.read8(addr);\n  }\n\n  read16indirect(addr) {\n    // Special read16 method for indirect mode reading (NES bug)\n    var addr2 = (addr & 0xff00) | (((addr & 0xff) + 1) & 0xff);\n    var lo = this.read8(addr);\n    var hi = this.read8(addr2);\n\n    return (hi << 8) | lo;\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.memory.write8(addr, value);\n    } else if (addr < 0x4000) {\n      // 7 bytes PPU registers\n      // mirrored from 0x2000 to 0x4000\n      this.ppu.write8(0x2000 + (addr % 8), value);\n    } else if (addr === 0x4014) {\n      // This might seem a bit odd but this avoids circular reference (ppu using cpu methods)\n      addr = value << 8;\n      this.ppu.tmpOamAddress = this.ppu.oamAddress;\n\n      for (var i = 0; i < 256; i++) {\n        this.ppu.memory.oam[this.ppu.oamAddress] = this.read8(addr);\n        this.ppu.oamAddress++;\n        addr++;\n      }\n\n      this.ppu.oamAddress = this.ppu.tmpOamAddress;\n      this.stall();\n    } else if (addr === 0x4015) {\n      this.apu.write8(addr, value);\n    } else if (addr === 0x4016) {\n      this.controller.write8(value);\n    } else if (addr === 0x4017) {\n      // TODO sound\n    } else if (addr >= 0x6000) {\n      // Write to mapper (handled by PPU)\n      this.ppu.memory.mapper.write8(addr, value);\n    } else if (addr < 0x6000) {\n      // console.log('I/O REGISTERS');\n    }\n  }\n\n  /**\n   * Stack methods\n   */\n\n  stackPush8(value) {\n    this.memory.stack[this.sp] = value;\n    this.sp = (this.sp - 1) & 0xff;\n  }\n\n  stackPush16(value) {\n    // Get the 8 highest bits\n    // Truncate the 8 lower bits\n    // Push the two parts of `value`\n    this.stackPush8(value >> 8);\n    this.stackPush8(value & 0xff);\n  }\n\n  stackPull8(value) {\n    this.sp = (this.sp + 1) & 0xff;\n    return this.memory.stack[this.sp];\n  }\n\n  stackPull16(value) {\n    return this.stackPull8() | (this.stackPull8() << 8);\n  }\n\n  /**\n   * Flag methods\n   */\n\n  setZeroFlag(value) {\n    if (value === 0) {\n      this.z = 1;\n    } else {\n      this.z = 0;\n    }\n  }\n\n  setNegativeFlag(value) {\n    if ((value & 0x80) !== 0) {\n      this.n = 1;\n    } else {\n      this.n = 0;\n    }\n  }\n\n  getFlags() {\n    // Concatenate the values of the flags in an int\n    var flags = 0;\n\n    flags = flags | (this.c << 0);\n    flags = flags | (this.z << 1);\n    flags = flags | (this.i << 2);\n    flags = flags | (this.d << 3);\n    flags = flags | (0 << 4);\n    flags = flags | (1 << 5);\n    flags = flags | (this.v << 6);\n    flags = flags | (this.n << 7);\n\n    return flags;\n  }\n\n  setFlags(value) {\n    this.c = (value >> 0) & 1;\n    this.z = (value >> 1) & 1;\n    this.i = (value >> 2) & 1;\n    this.d = (value >> 3) & 1;\n    this.v = (value >> 6) & 1;\n    this.n = (value >> 7) & 1;\n  }\n}\n\nexport default CPU;\n","/**\n * http://wiki.nesdev.com/w/index.php/PPU_nametables\n */\nclass NameTable {\n  constructor() {\n    this.data = new Uint8Array(2048).fill(0x00);\n    // http://wiki.nesdev.com/w/index.php/Mirroring\n    this.mirrors = [\n      [0, 0, 1, 1], // Horizontal\n      [0, 1, 0, 1], // Vertical\n      [0, 0, 0, 0], // Single screen\n      [1, 1, 1, 1], // Single screen 2\n      [0, 1, 2, 3] // 4 Screen\n    ];\n  }\n\n  flush() {\n    this.data.fill(0x00);\n  }\n\n  _resolve(mode, addr) {\n    addr = addr % 0x1000;\n\n    return this.mirrors[mode][parseInt(addr / 0x400)] * 0x400 + (addr % 0x400);\n  }\n\n  read8(mode, addr) {\n    return this.data[this._resolve(mode, addr)];\n  }\n\n  write8(mode, addr, value) {\n    this.data[this._resolve(mode, addr)] = value;\n  }\n}\n\n/**\n * Color lookup table\n * 8 palettes of 4 colors\n */\nclass PaletteTable {\n  constructor() {\n    this.data = new Uint8Array(32).fill(0x00);\n  }\n\n  flush() {\n    this.data.fill(0x00);\n  }\n\n  write8(addr, value) {\n    addr = addr % 32;\n\n    // Each 4th byte of the palettes are mirrored into each other\n    // $3F10/$3F14/$3F18/$3F1C == $3F00/$3F04/$3F08/$3F0C\n    if (addr % 4 === 0 && addr >= 16) {\n      addr -= 16;\n    }\n\n    this.data[addr] = value;\n  }\n\n  read8(addr) {\n    addr = addr % 32;\n\n    if (addr % 4 === 0 && addr >= 16) {\n      addr -= 16;\n    }\n    return this.data[addr];\n  }\n}\n\n/**\n *\n *   Aka. VRAM\n *\n *   CHR: 0x0000 => 0x2000\n *   Nametable: 0x2000 => 0x3f00\n *   Background palette: 0x3F00 => 0x3F10\n *   Sprite palette: 0x3F00 => 0x3F20\n *\n */\nclass PPUMemory {\n  constructor() {\n    this.paletteTable = new PaletteTable();\n\n    // https://wiki.nesdev.com/w/index.php/PPU_OAM\n    // Max 64 sprites\n    // Byte 0 => Y position\n    // Byte 1 => Bank nbr (address in mapper)\n    // Byte 2 => Attributes (priority, hori. vert. switch)\n    // Byte 3 => X position\n    this.oam = new Uint8Array(256).fill(0x00);\n    this.nameTable = new NameTable();\n    this.mapper = null;\n  }\n\n  flush() {\n    this.paletteTable.flush();\n    this.oam.fill(0x00);\n    this.nameTable.flush();\n  }\n\n  write8(addr, value) {\n    addr = addr % 0x4000;\n\n    if (addr < 0x2000) {\n      this.mapper.write8(addr, value);\n    } else if (addr < 0x3f00) {\n      this.nameTable.write8(this.mapper.mirrorType, addr, value);\n    } else if (addr < 0x4000) {\n      this.paletteTable.write8(addr, value);\n    } else {\n      throw new Error(\"Unknown PPU addr \" + addr);\n    }\n  }\n\n  readNametable(addr) {\n    addr = addr % 0x4000;\n    return this.nameTable.read8(this.mapper.mirrorType, addr);\n  }\n\n  read8(addr) {\n    addr = addr % 0x4000;\n\n    if (addr < 0x2000) {\n      return this.mapper.read8(addr);\n    } else if (addr < 0x3f00) {\n      return this.nameTable.read8(this.mapper.mirrorType, addr);\n    } else if (addr < 0x4000) {\n      this.paletteTable.read8(addr);\n    } else {\n      throw new Error(\"Unknown PPU addr \" + addr);\n    }\n  }\n}\n\nexport default PPUMemory;\n","import PPUMemory from \"./PPUMemory\";\n\nimport {\n  INTERRUPTS,\n  RENDERING_MODES,\n  COLORS,\n  SCANLINES,\n  CYCLES\n} from \"./constants\";\n\n/**\n * Picture Processing Unit.\n * Handles graphics.\n */\nclass PPU {\n  constructor() {\n    this.memory = new PPUMemory();\n    this.cycle = 0;\n    this.cycleType = null;\n    this.scanline = 261;\n    this.scanlineType = null;\n    this.interrupt = null;\n\n    //\n    // PPU registers\n    // https://wiki.nesdev.com/w/index.php/PPU_scrolling#PPU_registers\n    //\n\n    // v & t are pointers used to point where to read & write to PPU memory (background)\n\n    // current vram address (15 bit)\n    this.v = 0;\n    // temporary vram address (15 bit)\n    // can also be thought of as the address of the top left onscreen tile.\n    this.t = 0;\n    // Y, used to help compute vram address\n    this.y = 0;\n    // fine x scroll (3 bit)\n    this.x = 0;\n    // write toggle (1 bit)\n    this.w = 0;\n    // even/odd frame flag (1 bit)\n    this.f = 0;\n\n    this.register = 0;\n\n    // NMI flags (Non Maskable Interrupt) controls VBlank\n    // https://wiki.nesdev.com/w/index.php/NMI\n    this.nmiOccurred = 0;\n    this.nmiOutput = 0;\n\n    //\n    // Containers holding bufferized data to display\n    //\n\n    // Background & Sprites temporary variables\n    this.backgroundTileBuffer = [];\n    this.lowTileByte = 0;\n    this.highTileByte = 0;\n    this.attributeTableByte = 0;\n    this.spriteCount = 0;\n    this.sprites = new Array(8);\n\n    for (var i = 0; i < 8; i++) {\n      this.sprites[i] = {\n        buffer: [],\n        x: null,\n        priority: null,\n        index: null\n      };\n    }\n\n    //\n    // Registers\n    //\n\n    this.registerRead = 0;\n    this.registerBuffer = 0;\n\n    // 0x2000 PPUCTRL\n    // Current nametable 0: $2000; 1: $2400; 2: $2800; 3: $2C00\n    this.fNameTable = 0;\n    // Increment vram of 1 or 32\n    this.fIncrement = 0;\n    // 0x0000 or 0x1000 (ignored in 8x16 mode)\n    this.fSpriteTable = 0;\n    // 0x0000 or 0x1000\n    this.fBackgroundTable = 0;\n    // 8x8 or 8x16\n    this.fSpriteSize = 0;\n    // Unused yet ?\n    this.fMasterSlave = 0;\n\n    // 0x2001 PPUMASK\n    this.fGrayscale = 0; // 0: color; 1: grayscale\n    this.fShowLeftBackground = 0; // 0: hide; 1: show\n    this.fShowLeftSprites = 0; // 0: hide; 1: show\n    this.fShowBackground = 0; // 0: hide; 1: show\n    this.fShowSprites = 0; // 0: hide; 1: show\n    // Unused\n    this.fRedTint = 0; // 0: normal; 1: emphasized\n    this.fGreenTint = 0; // 0: normal; 1: emphasized\n    this.fBlueTint = 0; // 0: normal; 1: emphasized\n\n    // 0x2002 PPUSTATUS\n\n    // Set if sprite 0 overlaps background pixel\n    this.fSpriteZeroHit = 0;\n    this.fSpriteOverflow = 0;\n\n    // 0x2003 OAMADDR\n    this.tmpOamAddress = 0;\n    this.oamAddress = 0;\n\n    // 0x2007 PPUDATA\n    this.bufferedData = 0; // for buffered reads\n\n    // Pixel rendering variables\n    this.backgroundColor = 0;\n    this.spriteColor = 0;\n    this.spriteIndex = 0;\n    this.isBackgroundPixel = true;\n    this.backgroundPixel = 0;\n    this.spritePixel = 0;\n    this.color = 0;\n\n    // Buffered data\n    this.setRenderingMode(RENDERING_MODES.NORMAL);\n    this.resetBuffers();\n\n    this.frameReady = false;\n\n    //\n    // Debug data & variables\n    //\n    this.patternTable1 = new Uint8Array(160 * 160 * 4).fill(0xff);\n    this.patternTable2 = new Uint8Array(160 * 160 * 4).fill(0xff); // 124 x 124 + 2px spacing\n    this.oamTable = new Uint8Array(80 * 160 * 4); // 64 x 124 + 2 px spacing\n\n    this.patternTablesColors = [\n      [0xff, 0xff, 0xff],\n      [0x33, 0x33, 0x33],\n      [0xbf, 0xbf, 0xbf],\n      [0x00, 0x00, 0x00]\n    ];\n  }\n\n  /**\n   * Utils methods\n   */\n\n  connectROM(rom) {\n    this.memory.mapper = rom.mapper;\n  }\n\n  resetBuffers() {\n    this.frameBuffer = new Uint8Array(256 * 240 * 4).fill(0x00);\n    this.frameBackgroundBuffer = new Uint8Array(256 * 240 * 4).fill(0x00);\n    this.frameSpriteBuffer = new Uint8Array(256 * 240 * 4).fill(0x00);\n    this.frameColorBuffer = new Uint32Array(256 * 240).fill(0x00);\n  }\n\n  /**\n   *  Used for debugging\n   */\n\n  _parsePatternTable(_from, to, patternTable) {\n    var value = null;\n    var lowTileData = 0;\n    var highTileData = 0;\n    var v = 0;\n    var i = _from;\n    var y = 0;\n    var z = 0;\n    var s = 0;\n\n    while (i < to) {\n      lowTileData = this.memory.read8(i);\n      highTileData = this.memory.read8(i + 8);\n\n      z = 0;\n\n      while (z < 8) {\n        value = (((lowTileData >> z) & 1) << 1) + ((highTileData >> z) & 1);\n        v = (i % 8) * 160; // Tmp vertical position\n        v += y * 160; // Permanent vertical position;\n        v += 7 - z; // Tmp horizontal position\n        v += (s % 16) * 10; // Permanent horizontal position\n        v *= 4; // RGBA\n\n        patternTable[v] = this.patternTablesColors[value][0];\n        patternTable[v + 1] = this.patternTablesColors[value][1];\n        patternTable[v + 2] = this.patternTablesColors[value][2];\n        patternTable[v + 3] = 0xff;\n\n        z++;\n      }\n\n      if (i % 256 === 0 && i > _from) {\n        y += 10; // 10 instead of 8 because need 2px spacing for display\n      }\n\n      i++;\n\n      if (i % 8 === 0) {\n        i += 8;\n        s++;\n      }\n    }\n    return patternTable;\n  }\n\n  getPatternTables() {\n    return [\n      this._parsePatternTable(0, 4096, this.patternTable1),\n      this._parsePatternTable(4096, 8192, this.patternTable2)\n    ];\n  }\n\n  getOamTable() {\n    var tile,\n      table,\n      spriteSize,\n      attributes,\n      address,\n      lowTileData,\n      highTileData,\n      tileShiftX,\n      tileShiftY,\n      tableY,\n      value,\n      v,\n      isReversedVertically,\n      isReversedHorizontally;\n\n    tableY = 0;\n\n    // Not all sprites slots are used\n    // We must flush it at each frame otherwhise we'll end up\n    // with stale sprites\n    this.oamTable.fill(0xff);\n\n    for (let sprite = 0; sprite < 64; sprite++) {\n      tile = this.memory.oam[sprite * 4 + 1];\n      spriteSize = this.getSpriteSize();\n\n      if (this.fSpriteSize === 0) {\n        table = this.fSpriteTable;\n      } else {\n        table = tile & 1;\n        tile = tile & 0xfe;\n      }\n\n      attributes = this.memory.oam[sprite * 4 + 2];\n      address = 0x1000 * table + tile * 16;\n      isReversedVertically = (attributes & 0x80) === 0x80;\n      isReversedHorizontally = (attributes & 0x40) === 0x40;\n\n      if (tile === 0) {\n        // Unused sprite\n        continue;\n      }\n\n      for (let tileY = 0; tileY < spriteSize; tileY++) {\n        lowTileData = this.memory.read8(address);\n        highTileData = this.memory.read8(address + 8);\n        tileShiftY = isReversedVertically ? spriteSize - 1 - tileY : tileY;\n\n        for (let tileX = 0; tileX < 8; tileX++) {\n          tileShiftX = isReversedHorizontally ? 7 - tileX : tileX;\n          value =\n            ((lowTileData >> tileShiftX) & 1) |\n            (((highTileData >> tileShiftX) & 1) << 1);\n          v = tileShiftY * 80; // Tmp vertical position\n          v += tableY * 80; // Permanent vertical position;\n          v += 7 - tileX; // Tmp horizontal position\n          v += (sprite % 8) * 8 + (sprite % 8) * 2; // Permanent horizontal position\n          v *= 4; // RGBA\n\n          this.oamTable[v] = this.patternTablesColors[value][0];\n          this.oamTable[v + 1] = this.patternTablesColors[value][1];\n          this.oamTable[v + 2] = this.patternTablesColors[value][2];\n          this.oamTable[v + 3] = 0xff;\n        }\n\n        address++;\n\n        if (this.fSpriteSize !== 0 && tileY === 7) {\n          tile++;\n          address = 0x1000 * table + tile * 16;\n        }\n      }\n\n      if (sprite % 8 === 0 && sprite > 0) {\n        tableY += 18;\n      }\n    }\n\n    return this.oamTable;\n  }\n\n  /**\n   * Init methods, configuration\n   */\n\n  reset() {\n    // Clean dat shit\n    this.memory.flush();\n    this.cycle = 0;\n    this.scanline = 261;\n    this.v = 0;\n    this.t = 0;\n    this.x = 0;\n    this.w = 0;\n    this.f = 0;\n    this.register = 0;\n    this.nmiOccurred = 0;\n    this.nmiOutput = 0;\n    this.lowTileByte = 0;\n    this.highTileByte = 0;\n    this.tileData = [];\n    this.spriteCount = 0;\n    this.fNameTable = 0;\n    this.fIncrement = 0;\n    this.fSpriteTable = 0;\n    this.fBackgroundTable = 0;\n    this.fSpriteSize = 0;\n    this.fMasterSlave = 0;\n    this.fGrayscale = 0;\n    this.fShowLeftBackground = 0;\n    this.fShowLeftSprites = 0;\n    this.fShowBackground = 0;\n    this.fShowSprites = 0;\n    this.fRedTint = 0;\n    this.fGreenTint = 0;\n    this.fBlueTint = 0;\n    this.fSpriteZeroHit = 0;\n    this.fSpriteOverflow = 0;\n    this.oamAddress = 0;\n    this.bufferedData = 0;\n    this.frameBuffer.fill(0x00);\n    this.frameReady = false;\n  }\n\n  setRenderingMode(mode) {\n    this.renderingMode = {\n      [RENDERING_MODES.NORMAL]: this.normalRenderingMode,\n      [RENDERING_MODES.SPLIT]: this.splitRenderingMode\n    }[mode];\n  }\n\n  /**\n   * Emulation related methods\n   */\n\n  getSpriteSize() {\n    return this.fSpriteSize ? 16 : 8;\n  }\n\n  /*  Handles the read communication between CPU and PPU */\n  read8(address) {\n    switch (address) {\n      case 0x2002: {\n        /**\n         * 0x2002: PPUSTATUS\n         * Used to describe the status of a PPU frame\n         * Note: Resets write toggle `w`\n         */\n        this.registerRead = this.register & 0x1f;\n        this.registerRead = this.registerRead | (this.fSpriteOverflow << 5);\n        this.registerRead = this.registerRead | (this.fSpriteZeroHit << 6);\n        if (this.nmiOccurred) {\n          // Avoid reading the NMI right after it is set\n          if (this.cycle !== 2 || this.scanline !== 241) {\n            this.registerRead = this.registerRead | (1 << 7);\n          }\n        }\n        this.nmiOccurred = 0;\n        this.w = 0;\n\n        return this.registerRead;\n      }\n      case 0x2004: {\n        return this.memory.oam[this.oamAddress];\n      }\n      case 0x2007: {\n        this.registerRead = this.memory.read8(this.v);\n        // Emulate buffered reads\n        if (this.v % 0x4000 < 0x3f00) {\n          this.registerBuffer = this.bufferedData;\n          this.bufferedData = this.registerRead;\n          this.registerRead = this.registerBuffer;\n        } else {\n          this.bufferedData = this.memory.read8(this.v - 0x1000);\n        }\n        // Increment v address\n        if (this.fIncrement === 0) {\n          this.v += 1;\n        } else {\n          this.v += 32;\n        }\n        return this.registerRead;\n      }\n    }\n    return 0;\n  }\n\n  /* Handles the write communication between CPU and PPU */\n  write8(address, value, cpuRead8) {\n    // Pointer to the last value written to a register\n    // Used by PPUSTATUS (0x2002)\n    this.register = value;\n\n    switch (address) {\n      case 0x2000: {\n        /**\n         * 0x2000: PPUCTR\n         * Sets 7 flags that control where/how the ROM data is read\n         */\n        this.fNameTable = (value >> 0) & 3;\n        this.fIncrement = (value >> 2) & 1;\n        this.fSpriteTable = (value >> 3) & 1;\n        this.fBackgroundTable = (value >> 4) & 1;\n        this.fSpriteSize = (value >> 5) & 1;\n        this.fMasterSlave = (value >> 6) & 1;\n        this.nmiOutput = ((value >> 7) & 1) === 1;\n        this.t = (this.t & 0xf3ff) | ((value & 0x03) << 10);\n        break;\n      }\n      case 0x2001: {\n        /**\n         * 0x2001: PPUMASK\n         * Sets 8 flags (1 byte) that control how to display pixels on screen\n         */\n        this.fGrayscale = (value >> 0) & 1;\n        this.fShowLeftBackground = (value >> 1) & 1;\n        this.fShowLeftSprites = (value >> 2) & 1;\n        this.fShowBackground = (value >> 3) & 1;\n        this.fShowSprites = (value >> 4) & 1;\n        this.fRedTint = (value >> 5) & 1;\n        this.fGreenTint = (value >> 6) & 1;\n        this.fBlueTint = (value >> 7) & 1;\n        break;\n      }\n      case 0x2003: {\n        // 0x2003: OAMADDR\n        this.oamAddress = value;\n        break;\n      }\n      case 0x2004: {\n        // 0x2004: OAMDATA (write)\n        this.memory.oam[this.oamAddress] = value;\n        this.oamAddress++;\n        break;\n      }\n      case 0x2005: {\n        /**\n         * 0x2005: PPUSCROLL\n         * Update the scroll variables, aka which pixel of the nametable will be\n         * at the top left of the screen\n         */\n        if (this.w === 0) {\n          this.t = (this.t & 0xffe0) | (value >> 3);\n          this.x = value & 0x07;\n          this.w = 1;\n        } else {\n          this.t = (this.t & 0x8fff) | ((value & 0x07) << 12);\n          this.t = (this.t & 0xfc1f) | ((value & 0xf8) << 2);\n          this.w = 0;\n        }\n        break;\n      }\n      case 0x2006: {\n        if (this.w === 0) {\n          this.t = (this.t & 0x80ff) | ((value & 0x3f) << 8);\n          this.w = 1;\n        } else {\n          this.t = (this.t & 0xff00) | value;\n          this.v = this.t;\n          this.w = 0;\n        }\n        break;\n      }\n      case 0x2007: {\n        // 0x2007: PPUDATA\n        this.memory.write8(this.v, value);\n        if (this.fIncrement === 0) {\n          this.v += 1;\n        } else {\n          this.v += 32;\n        }\n        break;\n      }\n      case 0x4014: {\n        // 0x4014 is handled by the CPU to avoid using cpu methods here\n        break;\n      }\n    }\n  }\n\n  //\n  // https://wiki.nesdev.com/w/index.php/PPU_scrolling\n  //\n\n  updateScrollingX() {\n    // https://wiki.nesdev.com/w/index.php/PPU_scrolling#Coarse_X_increment\n    // increment hori(v)\n    // if coarse X === 31\n    if ((this.v & 0x001f) === 31) {\n      // coarse X = 0\n      this.v = this.v & 0xffe0;\n      // switch horizontal nametable\n      this.v = this.v ^ 0x0400;\n    } else {\n      // increment coarse X\n      this.v++;\n    }\n  }\n\n  updateScrollingY() {\n    // This one really is a mess\n    // Values are coming from nesdev, don't touch, don't break\n    if (this.cycleType === CYCLES.INCREMENT_Y) {\n      // https://wiki.nesdev.com/w/index.php/PPU_scrolling#Y_increment\n      // increment vert(v)\n      // if fine Y < 7\n      if ((this.v & 0x7000) !== 0x7000) {\n        // increment fine Y\n        this.v += 0x1000;\n      } else {\n        // fine Y = 0\n        this.v = this.v & 0x8fff;\n        // let y = coarse Y\n        this.y = (this.v & 0x03e0) >> 5;\n        if (this.y === 29) {\n          // coarse Y = 0\n          this.y = 0;\n          // switch vertical nametable\n          this.v = this.v ^ 0x0800;\n        } else if (this.y === 31) {\n          // coarse Y = 0, nametable not switched\n          this.y = 0;\n        } else {\n          // increment coarse Y\n          this.y++;\n        }\n        // put coarse Y back into v\n        this.v = (this.v & 0xfc1f) | (this.y << 5);\n      }\n    }\n\n    if (this.cycleType === CYCLES.COPY_X) {\n      // https://wiki.nesdev.com/w/index.php/PPU_scrolling#At_dot_257_of_each_scanline\n      this.v = (this.v & 0xfbe0) | (this.t & 0x041f);\n    }\n  }\n\n  setVerticalBlank() {\n    this.nmiOccurred = 1;\n  }\n\n  /**\n   * Called at the end of vertical blank\n   * Prepares the PPU for next frame\n   */\n  clearVerticalBlank() {\n    this.nmiOccurred = 0;\n    this.frameReady = true;\n  }\n\n  acknowledgeFrame() {\n    // Must be called by code handling the NES\n    this.frameReady = false;\n\n    if (this.fShowSprites === 1) {\n      this.fSpriteOverflow = 0;\n      this.fSpriteZeroHit = 0;\n    }\n\n    this.frameBackgroundBuffer.fill(0x00);\n    this.frameSpriteBuffer.fill(0x00);\n  }\n\n  /**\n   * Returns the current background pixel\n   * if background mode is enabled.\n   *\n   * This is where fine x is used as it points to\n   * the correct bit of the current tile to use.\n   */\n  getCurrentBackgroundPixel() {\n    if (this.fShowBackground === 0) {\n      return 0;\n    }\n\n    return this.backgroundTileBuffer[this.x] & 0x0f;\n  }\n\n  /**\n   * Return the current sprite pixel\n   * if sprite mode is enabled and there is a pixel to display.\n   */\n  getCurrentSpritePixel() {\n    var color, offset;\n\n    if (this.fShowSprites === 0) {\n      return [0, 0];\n    }\n\n    for (var i = 0; i < this.spriteCount; i++) {\n      offset = this.cycle - 1 - this.sprites[i].x;\n      if (offset < 0 || offset > 7) {\n        continue;\n      }\n\n      color = this.sprites[i].buffer[offset] & 0x0f;\n\n      if (color % 4 === 0) {\n        continue;\n      }\n      return [i, color | 0x10];\n    }\n    return [0, 0];\n  }\n\n  /**\n   * Assign a RGBA color to the int8 array\n   */\n  setColorToBuffer(buffer, i, color) {\n    buffer[i] = (color >> 16) & 0xff;\n    buffer[i + 1] = (color >> 8) & 0xff;\n    buffer[i + 2] = color & 0xff;\n    buffer[i + 3] = 0xff;\n  }\n\n  normalRenderingMode(pos, colorPos, c) {\n    this.setColorToBuffer(this.frameBuffer, colorPos, c);\n  }\n\n  splitRenderingMode(pos, colorPos, c) {\n    this.frameColorBuffer[pos] = c;\n\n    if (this.isBackgroundPixel) {\n      this.setColorToBuffer(this.frameBackgroundBuffer, colorPos, c);\n    } else {\n      this.setColorToBuffer(this.frameSpriteBuffer, colorPos, c);\n      this.setColorToBuffer(this.frameBackgroundBuffer, colorPos, 0x00);\n    }\n  }\n\n  /**\n   * Render either a background or sprite pixel or a black pixel\n   * Executed 256 times per visible (240) scanline\n   */\n  renderPixel() {\n    var x = this.cycle - 1;\n    var y = this.scanline;\n    var pos = y * 256 + x;\n\n    this.isBackgroundPixel = true;\n    this.color = 0;\n    this.backgroundColor =\n      x < 8 && this.fShowLeftBackground === 0\n        ? 0\n        : this.getCurrentBackgroundPixel();\n\n    [this.spriteIndex, this.spriteColor] =\n      x < 8 && this.fShowLeftSprites === 0\n        ? [0, 0]\n        : this.getCurrentSpritePixel();\n\n    // cf priority decision table https://wiki.nesdev.com/w/index.php/PPU_rendering\n    // TODO: Looks like there's a display blinking bug on some games, cf Castlevania\n    this.backgroundPixel = this.backgroundColor % 4;\n    this.spritePixel = this.spriteColor % 4;\n\n    if (this.backgroundPixel === 0 && this.spritePixel === 0) {\n      this.color = 0;\n    } else if (this.backgroundPixel === 0 && this.spritePixel !== 0) {\n      this.color = this.spriteColor;\n      this.isBackgroundPixel = false;\n    } else if (this.backgroundPixel !== 0 && this.spritePixel === 0) {\n      this.color = this.backgroundColor;\n    } else {\n      if (this.sprites[this.spriteIndex].index === 0 && x < 255) {\n        this.fSpriteZeroHit = 1;\n      }\n      if (this.sprites[this.spriteIndex].priority === 0) {\n        this.color = this.spriteColor;\n        this.isBackgroundPixel = false;\n      } else {\n        this.color = this.backgroundColor;\n      }\n    }\n\n    // Fills the buffer at pos `x`, `y` with rgb color `c`\n    this.renderingMode(\n      pos,\n      pos * 4,\n      COLORS[this.memory.paletteTable.read8(this.color)]\n    );\n  }\n\n  /**\n   *  Helper method that appends a tile line to `tileData`\n   *  by reading & concatenating lowTileByte, highTileByte and attributeTableByte.\n   *  Must be called 8 times (or 16 for some sprites) to generate a sprite\n   */\n  readTileRow(\n    tileData,\n    attributeTableByte,\n    lowTileByte,\n    highTileByte,\n    isReversedHorizontally,\n    flush\n  ) {\n    var tileShiftX = 0;\n    var value = 0;\n\n    if (flush) {\n      tileData.length = 0;\n    }\n\n    for (var tileX = 0; tileX < 8; tileX++) {\n      tileShiftX = isReversedHorizontally ? tileX : 7 - tileX;\n      value =\n        attributeTableByte |\n        (((lowTileByte >> tileShiftX) & 1) |\n          (((highTileByte >> tileShiftX) & 1) << 1));\n\n      tileData.push(value);\n    }\n  }\n\n  fetchSpriteRow(tileData, i, row) {\n    // Sub function of fetchAndStoreSprites\n    var tile = this.memory.oam[i * 4 + 1];\n    var attributes = this.memory.oam[i * 4 + 2];\n    var address;\n    var table = 0;\n    var isReversedVertically = (attributes & 0x80) === 0x80;\n    var isReversedHorizontally = (attributes & 0x40) === 0x40;\n    var attributeTableByte = (attributes & 3) << 2;\n    var spriteSize = this.getSpriteSize();\n\n    if (this.fSpriteSize === 0) {\n      table = this.fSpriteTable;\n    } else {\n      table = tile & 1;\n      tile = tile & 0xfe;\n    }\n\n    row = isReversedVertically ? spriteSize - 1 - row : row;\n\n    if (row > 7) {\n      tile++;\n      row = row % 8;\n    }\n\n    address = 0x1000 * table + tile * 16 + row;\n\n    this.lowTileByte = this.memory.read8(address);\n    this.highTileByte = this.memory.read8(address + 8);\n\n    this.readTileRow(\n      tileData,\n      attributeTableByte,\n      this.lowTileByte,\n      this.highTileByte,\n      isReversedHorizontally,\n      true\n    );\n  }\n\n  /**\n   * Retrieves the sprites that are to be rendered on the next scanline\n   * Executed at the end of a scanline\n   */\n  fetchAndStoreSpriteRows() {\n    var y, attributes, row;\n    this.spriteCount = 0;\n    var spriteSize = this.getSpriteSize();\n\n    for (var i = 0; i < 64; i++) {\n      y = this.memory.oam[i * 4 + 0];\n      row = this.scanline - y;\n\n      if (row < 0 || row >= spriteSize) {\n        continue;\n      }\n\n      if (this.spriteCount < 8) {\n        attributes = this.memory.oam[i * 4 + 2];\n\n        this.fetchSpriteRow(this.sprites[this.spriteCount].buffer, i, row);\n        this.sprites[this.spriteCount].x = this.memory.oam[i * 4 + 3];\n        this.sprites[this.spriteCount].priority = (attributes >> 5) & 1;\n        this.sprites[this.spriteCount].index = i;\n      }\n      this.spriteCount++;\n\n      if (this.spriteCount > 8) {\n        this.spriteCount = 8;\n        this.fSpriteOverflow = 1;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Actions that should be done over 8 ticks\n   * but instead done into 1 call because YOLO.\n   *\n   * Retrieves the background tiles that are to be rendered on the next X bytes\n   *\n   * - Read the nametable byte using current `v`\n   * - Fetch corresponding attribute byte using current `v`\n   * - Read CHR/Pattern table low+high bytes\n   */\n  fetchAndStoreBackgroundRow() {\n    var address;\n    var shift;\n    var fineY;\n    var nameTableByte = 0;\n\n    // Fetch Name Table Byte\n    address = 0x2000 | (this.v & 0x0fff);\n    nameTableByte = this.memory.read8(address);\n\n    // Fetch Attribute Table Byte\n    address =\n      0x23c0 |\n      (this.v & 0x0c00) |\n      ((this.v >> 4) & 0x38) |\n      ((this.v >> 2) & 0x07);\n    shift = ((this.v >> 4) & 4) | (this.v & 2);\n    this.attributeTableByte = ((this.memory.read8(address) >> shift) & 3) << 2;\n\n    // Fetch Low Tile Byte\n    fineY = (this.v >> 12) & 7;\n    address = 0x1000 * this.fBackgroundTable + nameTableByte * 16 + fineY;\n    this.lowTileByte = this.memory.read8(address);\n\n    // Fetch High Tile Byte\n    fineY = (this.v >> 12) & 7;\n    address = 0x1000 * this.fBackgroundTable + nameTableByte * 16 + fineY;\n    this.highTileByte = this.memory.read8(address + 8);\n\n    // Store Tile Data\n    this.readTileRow(\n      this.backgroundTileBuffer,\n      this.attributeTableByte,\n      this.lowTileByte,\n      this.highTileByte,\n      false,\n      false\n    );\n  }\n\n  /**\n   * Determines the type of the cycle\n   * Refer to https://wiki.nesdev.com/w/images/d/d1/Ntsc_timing.png\n   */\n  _cycleType() {\n    if (this.cycle === 0) {\n      return CYCLES.ZERO;\n    } else if (this.cycle === 1) {\n      return CYCLES.ONE;\n    } else if (this.cycle > 1 && this.cycle < 257) {\n      return CYCLES.VISIBLE;\n    } else if (this.cycle === 321) {\n      return CYCLES.FLUSH_TILEDATA;\n    } else if (this.cycle > 321 && this.cycle < 337) {\n      return CYCLES.PREFETCH;\n    } else if (this.cycle === 259) {\n      return CYCLES.SPRITES;\n    } else if (this.cycle === 258) {\n      return CYCLES.INCREMENT_Y;\n    } else if (this.cycle === 257) {\n      return CYCLES.COPY_X;\n    } else if (this.cycle > 279 && this.cycle < 305) {\n      return CYCLES.COPY_Y;\n    } else if (this.cycle === 340) {\n      return CYCLES.MAPPER_TICK;\n    } else {\n      return CYCLES.IDLE;\n    }\n  }\n\n  /**\n   * Determines the type of the scanline\n   */\n  _scanlineType() {\n    if (this.scanline < 240) {\n      return SCANLINES.VISIBLE;\n    } else if (this.scanline === 241) {\n      return SCANLINES.VBLANK;\n    } else if (this.scanline === 261) {\n      return SCANLINES.PRELINE;\n    } else {\n      return SCANLINES.IDLE;\n    }\n  }\n\n  doPreline() {\n    if (\n      this.cycleType === CYCLES.ONE ||\n      this.cycleType === CYCLES.VISIBLE ||\n      this.cycleType === CYCLES.PREFETCH\n    ) {\n      this.backgroundTileBuffer.shift();\n\n      if (this.cycle % 8 === 0) {\n        if (this.cycle < 256) {\n          this.fetchAndStoreBackgroundRow();\n        }\n        this.updateScrollingX();\n      }\n    }\n\n    if (this.cycleType === CYCLES.SPRITES) {\n      this.spriteCount = 0;\n    }\n\n    if (this.cycleType === CYCLES.COPY_Y) {\n      // https://wiki.nesdev.com/w/index.php/PPU_scrolling#During_dots_280_to_304_of_the_pre-render_scanline_.28end_of_vblank.29\n      this.v = (this.v & 0x841f) | (this.t & 0x7be0);\n    }\n\n    this.updateScrollingY();\n\n    if (this.cycleType === CYCLES.ONE) {\n      this.clearVerticalBlank();\n    }\n\n    if (this.cycleType === CYCLES.MAPPER_TICK) {\n      if (this.memory.mapper.tick()) {\n        return INTERRUPTS.IRQ;\n      }\n    }\n  }\n\n  doVisibleLine() {\n    if (this.cycleType === CYCLES.ONE || this.cycleType === CYCLES.VISIBLE) {\n      this.renderPixel();\n    }\n\n    if (this.cycleType === CYCLES.VISIBLE) {\n      this.backgroundTileBuffer.shift();\n\n      if (this.cycle % 8 === 0) {\n        if (this.cycle < 256) {\n          this.fetchAndStoreBackgroundRow();\n        }\n        this.updateScrollingX();\n      }\n    } else if (this.cycleType === CYCLES.FLUSH_TILEDATA) {\n      // Hackish hack, empty the remaining tile data at the beginning of prefetch\n      // Needs improvement\n      this.backgroundTileBuffer.length = 0;\n    } else if (this.cycleType === CYCLES.PREFETCH) {\n      if (this.cycle % 8 === 0) {\n        this.fetchAndStoreBackgroundRow();\n        this.updateScrollingX();\n      }\n    }\n\n    this.updateScrollingY();\n\n    if (this.cycleType === CYCLES.SPRITES) {\n      this.fetchAndStoreSpriteRows();\n    }\n\n    if (this.cycleType === CYCLES.MAPPER_TICK) {\n      if (this.memory.mapper.tick()) {\n        return INTERRUPTS.IRQ;\n      }\n    }\n\n    return null;\n  }\n\n  doVBlankLine() {\n    if (this.cycleType === CYCLES.SPRITES) {\n      this.spriteCount = 0;\n    }\n\n    // Vertical Blank is set at second tick of scanline 241\n    if (this.cycleType === CYCLES.ONE) {\n      this.setVerticalBlank();\n      if (this.nmiOutput) {\n        return INTERRUPTS.NMI; // Clean this shit\n      }\n    }\n\n    return null;\n  }\n\n  incrementCounters() {\n    this.cycle++;\n\n    // Skip one cycle when background is on for each odd frame\n    if (\n      this.scanline === 261 &&\n      this.cycle === 340 &&\n      this.fShowBackground !== 0 &&\n      this.f === 1\n    ) {\n      this.cycle++;\n      this.f = this.f ^ 1;\n    }\n\n    if (this.cycle === 341) {\n      this.cycle = 0;\n      this.scanline++;\n      if (this.scanline === 262) {\n        this.scanline = 0;\n      }\n    }\n  }\n\n  /**\n   * Main function of PPU.\n   * Increments counters (cycle, scanline, frame)\n   * Executes one action based on scanline + cycle\n   */\n  tick() {\n    this.cycleType = this._cycleType();\n    this.scanlineType = this._scanlineType();\n\n    if (this.scanlineType === SCANLINES.VBLANK) {\n      this.interrupt = this.doVBlankLine();\n    } else if (this.fShowBackground !== 0 || this.fShowSprites !== 0) {\n      if (this.scanlineType === SCANLINES.PRELINE) {\n        this.interrupt = this.doPreline();\n      } else if (this.scanlineType === SCANLINES.VISIBLE) {\n        this.interrupt = this.doVisibleLine();\n      }\n    } else {\n      this.interrupt = null;\n    }\n\n    this.incrementCounters();\n\n    return this.interrupt;\n  }\n}\n\nexport default PPU;\n","class BankMemory {\n  constructor(data, windowSize, bankSize) {\n    this.data = data;\n    this.swapMode = 0;\n    this.windowSize = windowSize;\n    // bankNbr is the number of 1kb banks we have in all our data\n    this.bankNbr = parseInt(this.data.length / 0x0400);\n    this.pointers = new Array(parseInt(windowSize / 0x0400)).fill(0);\n    // PRG is 32 by default, CHR is 8, but can be changed\n    this.bankSize = bankSize;\n    // Tmp variables\n    this.p = 0;\n    this.o = 0;\n    this.p1 = 0;\n    this.p2 = 0;\n\n    for (let i = 0; i < this.pointers.length; i++) {\n      this.pointers[i] = i;\n    }\n  }\n\n  setBankSize(size) {\n    this.bankSize = size;\n  }\n\n  /**\n    Move pointers to redirect to new banks\n  */\n  switchBank(_from, _to, value) {\n    this.p1 = parseInt(_from / 0x0400);\n    this.p2 = parseInt(_to / 0x0400);\n\n    if (value < 0) {\n      // Used to select latest bank, penultimate bank\n      value = this.bankNbr / this.bankSize + value;\n    }\n\n    value = value * (this.p2 - this.p1);\n\n    for (let x = 0, i = this.p1; i < this.p2; i++, x++) {\n      this.pointers[i] = value + x;\n    }\n  }\n\n  write8(addr, value) {\n    this.p = parseInt(addr / 0x0400);\n    this.o = addr % 0x0400;\n    this.data[this.pointers[this.p] * 0x0400 + this.o] = value;\n  }\n\n  read8(addr) {\n    this.p = parseInt(addr / 0x0400);\n    this.o = addr % 0x0400;\n    return this.data[this.pointers[this.p] * 0x0400 + this.o];\n  }\n}\n\nexport default BankMemory;\n","import BankMemory from \"./Bank\";\n\n/**\n * http://wiki.nesdev.com/w/index.php/Mapper\n */\nclass Mapper {\n  constructor(rom) {\n    this.chr = new BankMemory(rom.chr, 0x2000, 8);\n    this.prg = new BankMemory(rom.prg, 0x8000, 16);\n    this.sram = new Array(0x2000).fill(0xff);\n    this.mirrorType = rom.mirrorType;\n  }\n\n  /**\n   *  Only used for a few mappers\n   */\n  tick() {}\n}\n\nexport default Mapper;\n","import Mapper from \"./Mapper\";\n\n/**\n *   http://wiki.nesdev.com/w/index.php/NROM\n */\n\nclass NROM extends Mapper {\n  constructor(rom) {\n    super(rom);\n\n    this.prg.switchBank(0x4000, 0x8000, -1);\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      console.warn(\"Invalid write addr\", addr);\n    }\n  }\n}\n\nexport default NROM;\n","export var BANK_SIZES = {\n  \"4k\": 0x1000,\n  \"8k\": 0x2000,\n  \"16k\": 0x4000,\n  \"32k\": 0x8000\n};\n\nexport var NAMETABLE_MIRRORS = {\n  HORIZONTAL: 0,\n  VERTICAL: 1,\n  SINGLE_SCREEN_0: 2,\n  SINGLE_SCREEN_1: 3,\n  FOUR_SCREEN: 4\n};\n","import Mapper from \"./Mapper\";\n\nimport { NAMETABLE_MIRRORS } from \"./constants\";\n\nconst MMC1_MIRRORS = {\n  0: NAMETABLE_MIRRORS.SINGLE_SCREEN_0,\n  1: NAMETABLE_MIRRORS.SINGLE_SCREEN_1,\n  2: NAMETABLE_MIRRORS.VERTICAL,\n  3: NAMETABLE_MIRRORS.HORIZONTAL\n};\n\n/**\n * http://wiki.nesdev.com/w/index.php/MMC1\n */\nclass MMC1 extends Mapper {\n  constructor(rom) {\n    super(rom);\n    this.buffer = 0x10;\n    this.bufferIndex = 0;\n    this.conf = 0x0c;\n    this.prgBankMode = 0;\n    this.chrBankMode = 0;\n\n    this.prg.switchBank(0x4000, 0x8000, -1);\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  /**\n   *  MMC1 has an internal buffer which needs to be written 5 times before switching banks or\n   *  updating registers\n   */\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      if ((value & 0x80) !== 0) {\n        this.buffer = 0x10;\n        this.bufferIndex = 0;\n        this.control(this.conf | 0x0c);\n      } else {\n        // Write Register\n        this.buffer = (this.buffer >> 1) | ((value & 1) << 4);\n        this.bufferIndex++;\n\n        if (this.bufferIndex === 5) {\n          value = this.buffer;\n\n          // Control\n          if (addr < 0xa000) {\n            this.control(value);\n          } else if (addr < 0xc000) {\n            // CHR Bank 0\n            if (!this.chr.fixed) {\n              this.chr.switchBank(0, 0x1000, value);\n            } else {\n              value = parseInt(value >> 1);\n              this.chr.switchBank(0, 0x2000, value);\n            }\n          } else if (addr < 0xe000) {\n            // CHR Bank 1\n            if (!this.chr.fixed) {\n              // this.chr.updateUpperBank(value);\n              this.chr.switchBank(0x1000, 0x2000, value);\n            }\n          } else {\n            // PRG Bank\n            if (this.prg.fixed) {\n              value = parseInt(value >> 1);\n              this.prg.switchBank(0, 0x8000, value);\n            } else {\n              if (this.prg.swapMode === 0) {\n                this.prg.switchBank(0, 0x4000, 0);\n                this.prg.switchBank(0x4000, 0x8000, value);\n              } else {\n                this.prg.switchBank(0, 0x4000, value);\n                this.prg.switchBank(0x4000, 0x8000, -1);\n              }\n            }\n          }\n\n          this.buffer = 0x10;\n          this.bufferIndex = 0;\n        }\n      }\n    }\n  }\n\n  control(value) {\n    this.conf = value;\n    this.prgBankMode = (value >> 2) & 3;\n    this.chrBankMode = (value >> 4) & 1;\n    this.mirrorType = MMC1_MIRRORS[value & 3];\n\n    if (this.prgBankMode === 2) {\n      this.prg.swapMode = 0;\n    }\n    if (this.prgBankMode === 3) {\n      this.prg.swapMode = 1;\n    }\n\n    this.prg.fixed = this.prgBankMode === 0 || this.prgBankMode === 1;\n    this.chr.fixed = this.chrBankMode === 0;\n  }\n}\n\nexport default MMC1;\n","import Mapper from \"./Mapper\";\nimport { NAMETABLE_MIRRORS } from \"./constants\";\n\nconst MMC3_MIRRORS = {\n  0: NAMETABLE_MIRRORS.VERTICAL,\n  1: NAMETABLE_MIRRORS.HORIZONTAL\n};\n\nclass MMC3 extends Mapper {\n  constructor(rom) {\n    super(rom);\n    this.prgBankMode = 0;\n    this.chrBankMode = 0;\n    this.bankRegister = 0;\n    this.irqCounter = 0;\n    this.irqLatch = 0;\n    this.irqEnable = true;\n\n    // PRG banks of MMC3 requires special bank switching at init\n    this.prg.setBankSize(8);\n    this.prg.switchBank(0x4000, 0x6000, -2);\n    this.prg.switchBank(0x6000, 0x8000, -1);\n    this.prg.switchBank(0x0000, 0x2000, 0);\n    this.prg.switchBank(0x2000, 0x4000, 1);\n  }\n\n  /**\n   *  MMC3 has its own tick method. We must trigger IRQ interrupts\n   *  each time our internal counter reaches 0. Then it is reset\n   *  using `irqLatch` which is set in `control()`\n   */\n  tick() {\n    if (this.irqCounter === 0) {\n      this.irqCounter = this.irqLatch;\n    } else {\n      this.irqCounter--;\n      if (this.irqCounter === 0 && this.irqEnable) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      this.control(addr, value);\n    }\n  }\n\n  /**\n   *  To switch banks, MMC3 require first to set `bankRegister`\n   *  then to make another call to update the appropriate CHR or PRG\n   *  banks using one of two different modes.\n   */\n  control(addr, value) {\n    var isEven = addr % 2 === 0;\n\n    if (addr < 0x9fff && isEven) {\n      this.prgBankMode = (value >> 6) & 1;\n      this.chrBankMode = (value >> 7) & 1;\n      this.bankRegister = value & 7;\n    } else if (addr < 0xa000 && !isEven) {\n      switch (this.bankRegister) {\n        // Select 2 KB CHR bank at PPU $0000-$07FF (or $1000-$17FF);\n        case 0: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0, 0x0400, value & 0xfe);\n            this.chr.switchBank(0x0400, 0x0800, value | 0x01);\n          } else {\n            this.chr.switchBank(0x1000, 0x1400, value & 0xfe);\n            this.chr.switchBank(0x1400, 0x1800, value | 0x01);\n          }\n          break;\n        }\n        // Select 2 KB CHR bank at PPU $0800-$0FFF (or $1800-$1FFF);\n        case 1: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x0800, 0x0c00, value & 0xfe);\n            this.chr.switchBank(0x0c00, 0x1000, value | 1);\n          } else {\n            this.chr.switchBank(0x1800, 0x1c00, value & 0xfe);\n            this.chr.switchBank(0x1c00, 0x2000, value | 1);\n          }\n          break;\n        }\n        // Select 1 KB CHR bank at PPU $1000-$13FF (or $0000-$03FF);\n        case 2: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x1000, 0x01400, value);\n          } else {\n            this.chr.switchBank(0x0000, 0x0400, value);\n          }\n          break;\n        }\n        // Select 1 KB CHR bank at PPU $1400-$17FF (or $0400-$07FF);\n        case 3: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x1400, 0x1800, value);\n          } else {\n            this.chr.switchBank(0x0400, 0x0800, value);\n          }\n          break;\n        }\n        // Select 1 KB CHR bank at PPU $1800-$1BFF (or $0800-$0BFF);\n        case 4: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x1800, 0x1c00, value);\n          } else {\n            this.chr.switchBank(0x0800, 0x0c00, value);\n          }\n          break;\n        }\n        // Select 1 KB CHR bank at PPU $1C00-$1FFF (or $0C00-$0FFF);\n        case 5: {\n          if (this.chrBankMode === 0) {\n            this.chr.switchBank(0x1c00, 0x2000, value);\n          } else {\n            this.chr.switchBank(0x0c00, 0x1000, value);\n          }\n          break;\n        }\n        // Select 8 KB PRG ROM bank at $8000-$9FFF (or $C000-$DFFF);\n        case 6: {\n          if (this.prgBankMode === 0) {\n            this.prg.switchBank(0x4000, 0x6000, -2);\n            this.prg.switchBank(0x0000, 0x2000, value);\n          } else {\n            this.prg.switchBank(0x0000, 0x2000, -2);\n            this.prg.switchBank(0x4000, 0x6000, value);\n          }\n\n          break;\n        }\n        // Select 8 KB PRG ROM bank at $A000-$BFFF\n        case 7: {\n          this.prg.switchBank(0x2000, 0x4000, value);\n\n          if (this.prgBankMode === 0) {\n            this.prg.switchBank(0x4000, 0x6000, -2);\n          } else {\n            this.prg.switchBank(0x0000, 0x2000, -2);\n          }\n          break;\n        }\n      }\n    } else if (addr < 0xbfff && isEven) {\n      this.mirrorType = MMC3_MIRRORS[value & 1];\n    } else if (addr < 0xc000 && !isEven) {\n      // Write Protect, not implemented\n    } else if (addr < 0xdfff && isEven) {\n      this.irqLatch = value;\n    } else if (addr < 0xe000 && !isEven) {\n      this.irqCounter = 0;\n    } else if (addr < 0xffff && isEven) {\n      this.irqEnable = false;\n    } else if (addr < 0x10000 && !isEven) {\n      this.irqEnable = true;\n    } else {\n      throw new Error(\"Unknown control: \" + addr);\n    }\n  }\n}\n\nexport default MMC3;\n","import Mapper from \"./Mapper\";\n\n/**\n *  http://wiki.nesdev.com/w/index.php/UxROM\n */\nclass UXROM extends Mapper {\n  constructor(rom) {\n    super(rom);\n\n    this.prg.switchBank(0x4000, 0x8000, -1);\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      this.prg.switchBank(0, 0x4000, value & 0xf);\n    }\n  }\n}\n\nexport default UXROM;\n","import Mapper from \"./Mapper\";\n\n/**\n *   https://wiki.nesdev.com/w/index.php/INES_Mapper_003\n */\nclass CNROM extends Mapper {\n  constructor(rom) {\n    super(rom);\n\n    this.prg.switchBank(0x4000, 0x8000, -1);\n  }\n\n  read8(addr) {\n    if (addr < 0x2000) {\n      return this.chr.read8(addr);\n    } else if (addr < 0x8000) {\n      return this.sram[addr - 0x6000];\n    } else {\n      return this.prg.read8(addr - 0x8000);\n    }\n  }\n\n  write8(addr, value) {\n    if (addr < 0x2000) {\n      this.chr.write8(addr, value);\n    } else if (addr < 0x8000) {\n      this.sram[addr - 0x6000] = value;\n    } else {\n      this.chr.switchBank(0, 0x2000, value & 0xf);\n    }\n  }\n}\n\nexport default CNROM;\n","import NROM from \"./mappers/NROM\";\nimport MMC1 from \"./mappers/MMC1\";\nimport MMC3 from \"./mappers/MMC3\";\nimport UXROM from \"./mappers/UXROM\";\nimport CNROM from \"./mappers/CNROM\";\n\nconst HEADER_SIZE = 16;\nconst PRG_BANK_SIZE = 16384;\nconst CHR_BANK_SIZE = 8192;\n\nclass ROM {\n  /**\n   * Parse a .nes file according to the INES file format\n   * http://wiki.nesdev.com/w/index.php/INES\n   * https://wiki.nesdev.com/w/index.php/CHR_ROM_vs._CHR_RAM\n\n   * CHR => Pattern tables, the raw data to render by the PPU\n   * PRG => The program, used by the CPU\n   */\n  constructor(dataBuffer) {\n    var p = 0;\n    var byteArray = new Uint8Array(dataBuffer);\n    this.header = byteArray.subarray(p, HEADER_SIZE);\n\n    p += HEADER_SIZE;\n\n    this.nbrPRGBanks = this.header[4];\n    this.nbrCHRBanks = this.header[5];\n    // Cf below for types\n    this.mapperType = (this.header[6] >> 4) | ((this.header[7] >> 4) << 4);\n    // Type will depend on the mapper, check mapper classes\n    this.mirrorType = (this.header[6] & 1) | (((this.header[6] >> 3) & 1) << 1);\n    // 0: NTSC, 1: PAL\n    this.region = this.header[9] & 1;\n\n    var prgLength = this.nbrPRGBanks * PRG_BANK_SIZE;\n    var chrLength = this.nbrCHRBanks * CHR_BANK_SIZE;\n\n    this.prg = byteArray.subarray(p, p + prgLength);\n\n    p += prgLength;\n\n    if (chrLength > 0) {\n      this.chr = byteArray.subarray(p, p + chrLength);\n    } else {\n      this.chr = new Uint8Array(CHR_BANK_SIZE).fill(0);\n    }\n\n    switch (this.mapperType) {\n      case 0: {\n        this.mapper = new NROM(this);\n        break;\n      }\n      case 1: {\n        this.mapper = new MMC1(this);\n        break;\n      }\n      case 2: {\n        this.mapper = new UXROM(this);\n        break;\n      }\n      case 3: {\n        this.mapper = new CNROM(this);\n        break;\n      }\n      case 4: {\n        this.mapper = new MMC3(this);\n        break;\n      }\n      default: {\n        throw new Error(\"Invalid mapper: \" + this.mapperType);\n      }\n    }\n  }\n}\n\nexport default ROM;\n","// https://nesdoug.com/2015/12/02/14-intro-to-sound/\n// https://wiki.nesdev.com/w/index.php/APU_Frame_Counter\n\n/**\n * Is there anybody out there\n */\nclass APU {\n  write8(address, value) {}\n\n  read8() {\n    return 255;\n  }\n\n  tick() {}\n}\n\nexport default APU;\n","import { KEYBOARD_KEYS, BUTTONS } from \"./constants.js\";\n\n/**\n * The 8 controller buttons are mapped on 8bits\n */\nclass Controller {\n  constructor() {\n    this.buttons = new Array(8).fill(0);\n    // Switch\n    this.strobe = 0;\n    this.i = 0;\n\n    // Welp ... Don't have a better idea\n    document.addEventListener(\"keydown\", this.keyDown.bind(this));\n    document.addEventListener(\"keyup\", this.keyUp.bind(this));\n  }\n\n  _checkInput(event, value) {\n    switch (event.keyCode) {\n      case KEYBOARD_KEYS.START: {\n        this.buttons[BUTTONS.START] = value;\n        break;\n      }\n      case KEYBOARD_KEYS.SELECT: {\n        this.buttons[BUTTONS.SELECT] = value;\n        break;\n      }\n      case KEYBOARD_KEYS.A: {\n        this.buttons[BUTTONS.A] = value;\n        break;\n      }\n      case KEYBOARD_KEYS.B: {\n        this.buttons[BUTTONS.B] = value;\n        break;\n      }\n      case KEYBOARD_KEYS.LEFT: {\n        this.buttons[BUTTONS.LEFT] = value;\n        event.preventDefault();\n        break;\n      }\n      case KEYBOARD_KEYS.UP: {\n        this.buttons[BUTTONS.UP] = value;\n        event.preventDefault();\n        break;\n      }\n      case KEYBOARD_KEYS.RIGHT: {\n        this.buttons[BUTTONS.RIGHT] = value;\n        event.preventDefault();\n        break;\n      }\n      case KEYBOARD_KEYS.DOWN: {\n        this.buttons[BUTTONS.DOWN] = value;\n        event.preventDefault();\n        break;\n      }\n    }\n  }\n\n  keyDown(event) {\n    this._checkInput(event, 1);\n  }\n\n  keyUp(event) {\n    this._checkInput(event, 0);\n  }\n\n  write8(value) {\n    this.strobe = value;\n    if ((this.strobe & 1) === 1) {\n      this.i = 0;\n    }\n  }\n\n  read8() {\n    var value = this.buttons[this.i];\n    this.i++;\n\n    return value;\n  }\n}\n\nexport default Controller;\n","// From stackoverflow https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item) {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n","class Notifier {\n  constructor() {\n    this.observers = [];\n  }\n\n  addObserver(obs) {\n    this.observers.push(obs);\n  }\n\n  removeObserver(obs) {\n    this.observers = this.observers.filter(i => i !== obs);\n  }\n\n  notifyObservers(t, e) {\n    this.observers.forEach(obs => obs.notify(t, e));\n  }\n}\n\nexport default Notifier;\n","/**\n * Helper to encapsulate throttling logic\n */\nclass Throttle {\n  constructor(fps) {\n    this.fpsInterval = 1000 / fps;\n    this.now = null;\n    this.elapsed = null;\n    this.then = null;\n  }\n\n  isThrottled() {\n    this.now = Date.now();\n    this.elapsed = this.now - this.then;\n\n    if (this.elapsed > this.fpsInterval) {\n      this.then = this.now - (this.elapsed % this.fpsInterval);\n      return false;\n    }\n    return true;\n  }\n}\n\nexport default Throttle;\n","import CPU from \"./CPU\";\nimport PPU from \"./PPU\";\nimport ROM from \"./ROM\";\nimport APU from \"./APU\";\nimport Controller from \"./Controller\";\nimport { MODES, OPCODES, INTERRUPTS } from \"./constants.js\";\n\nimport { mergeDeep } from \"../utils/Merge\";\nimport Notifier from \"../utils/Notifier\";\nimport Throttle from \"../utils/Throttle\";\n\n/**\n * Main class for the emulator, controls the hardware emulation.\n * Fires up events.\n */\nclass Console extends Notifier {\n  constructor(fps = null) {\n    super();\n    this.cpu = new CPU();\n    this.ppu = new PPU();\n    this.apu = new APU();\n    this.controller = new Controller();\n    this.rom = null;\n    this.cycles = 0;\n    this.interrupt = null;\n    this.quickSaveData = null;\n\n    // CPU, APU, PPU and controller are cross referenced in the code\n    this.cpu.connect(\n      this.apu,\n      this.ppu,\n      this.controller\n    );\n    this.frameReq = null;\n\n    // Output & CPU throttling\n    this.frameThrottling = fps ? new Throttle(fps) : null;\n    this.nesThrottling = new Throttle(60);\n\n    // Debug variables\n    this.frameNbr = 0;\n    this.opCodesKeys = Object.keys(OPCODES);\n    this.modeKeys = Object.keys(MODES);\n  }\n\n  loadROM(data) {\n    this.rom = new ROM(data);\n    this.ppu.connectROM(this.rom);\n    this.reset();\n  }\n\n  reset() {\n    this.cpu.reset();\n    this.ppu.reset();\n    this.notifyObservers(\"nes-reset\", this.ppu.frameBuffer);\n  }\n\n  quickSave() {\n    // Ok so, this is a bit of a mess here\n    // Save also bundles the current ROM, and our memory buffers take a lot of place.\n    // localStorage has a strict threshold for what you can store.\n    // To work around this, Make a clone of the current NES object and empty the memory buffers\n    var quickSaveData = JSON.parse(JSON.stringify(this.cpu));\n\n    quickSaveData.ppu.frameBuffer = [];\n    quickSaveData.ppu.frameBackgroundBuffer = [];\n    quickSaveData.ppu.frameSpriteBuffer = [];\n    quickSaveData.ppu.frameColorBuffer = [];\n    quickSaveData.ppu.patternTable1 = [];\n    quickSaveData.ppu.patternTable2 = [];\n\n    this.notifyObservers(\"nes-quick-save\");\n    localStorage.quickSave = JSON.stringify(quickSaveData);\n  }\n\n  loadQuickSave(data) {\n    if (localStorage.quickSave) {\n      this.cpu = mergeDeep(this.cpu, JSON.parse(localStorage.quickSave));\n      this.cpu.ppu.resetBuffers();\n      this.notifyObservers(\"nes-load-quick-save\");\n    }\n  }\n\n  start() {\n    this._tick = this.tick;\n    this.frameReq = requestAnimationFrame(this.frame.bind(this));\n  }\n\n  /**\n   * Sync mode used in tests\n   */\n  startSync() {\n    let res = 0;\n\n    while (true) {\n      if (this.nesThrottling === null || !this.nesThrottling.isThrottled()) {\n        while (true) {\n          res = this.tick();\n\n          if (res === 1) {\n            break;\n          } else if (res === -1) {\n            this.stop();\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  startDebug() {\n    this._tick = this.tickDebug;\n    this.frameReq = requestAnimationFrame(this.frame.bind(this));\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameReq);\n  }\n\n  /**\n   *  Same a tick() but with additional notify calls for debug purposes.\n   *  Slows down the main loop which is why it needs a separate codepath\n   */\n  tickDebug() {\n    this.cycles = this.cpu.tick();\n    this.cycles = this.cycles * 3;\n\n    this.notifyObservers(\"cpu-tick\", [\n      this.cpu.instrCode,\n      this.opCodesKeys[this.cpu.instrOpCode],\n      this.modeKeys[this.cpu.instrMode],\n      this.cpu.instrSize,\n      this.cpu.instrCycles,\n      this.cpu.addr\n    ]);\n\n    for (; this.cycles > 0; this.cycles--) {\n      this.interrupt = this.ppu.tick();\n\n      if (this.interrupt !== null) {\n        if (this.interrupt === INTERRUPTS.NMI) {\n          this.cpu.triggerNMI();\n        } else if (this.interrupt === INTERRUPTS.IRQ) {\n          this.cpu.triggerIRQ();\n        }\n      }\n      // Check when next scanline is done\n\n      this.notifyObservers(\"ppu-tick\");\n\n      if (this.ppu.frameReady) {\n        this.notifyObservers(\"frame-ready\", this.ppu.frameBuffer);\n        this.notifyObservers(\"frame-ready-debug\");\n        this.ppu.acknowledgeFrame();\n        this.frameNbr++;\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  tick() {\n    this.cycles = this.cpu.tick();\n\n    if (this.cycles === -1) {\n      // CPU did nothing, this is our way of knowing the program should exit\n      return -1;\n    }\n\n    for (let c = this.cycles; c > 0; c--) {\n      this.apu.tick();\n    }\n\n    for (let c = this.cycles * 3; c > 0; c--) {\n      this.interrupt = this.ppu.tick();\n\n      if (this.interrupt !== null) {\n        if (this.interrupt === INTERRUPTS.NMI) {\n          this.cpu.triggerNMI();\n        } else if (this.interrupt === INTERRUPTS.IRQ) {\n          this.cpu.triggerIRQ();\n        }\n      }\n\n      if (this.ppu.frameReady) {\n        if (!this.frameThrottling.isThrottled()) {\n          this.notifyObservers(\"frame-ready\", [\n            this.ppu.frameBuffer,\n            this.ppu.frameBackgroundBuffer,\n            this.ppu.frameSpriteBuffer,\n            this.ppu.frameColorBuffer\n          ]);\n        }\n        this.ppu.acknowledgeFrame();\n        return 1;\n      }\n    }\n\n    return 0;\n  }\n\n  frame() {\n    let res = 0;\n\n    if (this.nesThrottling === null || !this.nesThrottling.isThrottled()) {\n      while (true) {\n        res = this._tick();\n\n        if (res === 1) {\n          break;\n        } else if (res === -1) {\n          this.stop();\n          return;\n        }\n      }\n    }\n\n    this.frameReq = requestAnimationFrame(this.frame.bind(this));\n  }\n}\n\nexport default Console;\n","//Test files\r\n//https://files.catbox.moe/v71b50.jpg\r\n//https://files.catbox.moe/d0sb20.mp4\r\n//https://files.catbox.moe/u5qtaf.nes\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport $ from 'jquery';\r\nimport Console  from \"./core/Console.js\";\r\n\r\nclass Messages extends Component {\r\n  \r\n    constructor(props) {\r\n        super(props)\r\n        this.console = new Console();\r\n                // Will notify `this.notify` upon events\r\n                this.console.addObserver( this );\r\n    }    \r\n\r\n    getStyle = (user) => {\r\n        if( user === \"You\" ) {\r\n            return {backgroundColor : '#FFDAB9', overflowY: \"auto\", opacity: .75 }\r\n\r\n        } else {\r\n                return {backgroundColor : \"#FFD700\", overflowY: \"auto\", opacity: .75 }\r\n            }\r\n        }\r\n    \r\n    determineVisualContent = (content, scroll) => {\r\n        if(typeof content == 'undefined' || typeof content == null) {\r\n            return null;\r\n        } else if (content.length <= 0) {\r\n            return null;\r\n        }\r\n        var splitContent = content.split('/');\r\n        if(splitContent[2] === \"files.catbox.moe\" || splitContent[2] === \"i.imgur.com\") {\r\n            splitContent = splitContent[3].split(\".\");\r\n            if(splitContent[1] == \"mp4\" || splitContent[1] == \"webm\" || splitContent[1] == \"avi\" || splitContent[1] == \"ogg\" || splitContent[1] == \"mpeg\") { \r\n                //ref = {vidRef => {this.vidRef = vidRef }}\r\n                return (\r\n                <div ><br /><video ref = {vidRef => {this.vidRef = vidRef }} onLoadedMetadata = {this.scrollToBottomVideo} controls autoplay> <source src={content} ></source></video> </div>\r\n                )\r\n            } else if(splitContent[1] == \"jpg\" || splitContent[1] == \"jpeg\" || splitContent[1] == \"png\" || splitContent[1] == \"gif\")  {\r\n                return <div ><br /><img src = {content} alt=\"User Content\" /></div>\r\n            } else if (splitContent[1] == \"nes\") {\r\n                this.console.loadROM(content);\r\n                this.console.start();\r\n\r\n                return (\r\n                    <div>\r\n                        <canvas ref = {clientNesRef => {this.clientNesRef = clientNesRef }} style = {{height: 300, width: 400}}> </canvas>\r\n                    </div>\r\n                )\r\n                \r\n            } else {\r\n                return null\r\n            }\r\n        } else if((splitContent[2] === \"www.youtube.com\" || splitContent[2] === \"youtube.com\" || splitContent[2] === \"youtu.be\" || splitContent[2] === \"www.youtu.be\")) {            \r\n            const regexp = /^.*(watch\\?v=)/;\r\n            \r\n            var youtubeURL = \"https://youtube.com/embed/\" + splitContent[3].replace(regexp, '');\r\n            return (\r\n                \r\n                <div><iframe width=\"560\" height=\"315\" src={youtubeURL} frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n        //this.scrollToBottomVideo();\r\n      }\r\n    \r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n        //this.scrollToBottomVideo();\r\n      }\r\n\r\n      hoverOn = () => {\r\n          //this.setState({opacity: 1});\r\n          this.chatRef.style.opacity = 1; // this.state.opacity;\r\n      }\r\n\r\n      hoverOff = () => {\r\n          //this.setState({opacity: .75});\r\n          this.chatRef.style.opacity = .75; // this.state.opacity;\r\n      }\r\n\r\n    scrollToBottom = () =>  \r\n        {  \r\n            this.chatRef.scrollIntoView({behavior: 'smooth', block: \"start\"}); \r\n        }\r\n    scrollToBottomVideo = () => \r\n    {\r\n        this.vidRef.scrollIntoView({behavior: 'smooth', block: \"start\"})\r\n    }\r\n\r\n  render() {    \r\n    return (\r\n        <div onMouseEnter = {this.hoverOn} onMouseLeave = {this.hoverOff} style = {this.getStyle(this.props.chatItems.user)} ref = {chatRef => {this.chatRef = chatRef }}> \r\n            {this.props.chatItems.user + \": \" + this.props.chatItems.message}\r\n            {this.determineVisualContent(this.props.chatItems.message)}\r\n        </div>\r\n        \r\n    )\r\n  };\r\n}\r\n\r\nMessages.propTypes = {\r\n    chatItems: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\nexport default Messages;\r\n","import React, { Component } from 'react';\r\nimport Messages from './Messages';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Chat extends Component {\r\n\r\n\r\n  render() {    \r\n   // console.log(this.props.chatMessages);\r\n    return (\r\n       // <showButton />\r\n        this.props.chatMessages.map(chatItems => (\r\n            <Messages key = {chatItems.id} chatItems = {chatItems}/>\r\n        \r\n     ))\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nChat.propTypes = {\r\n    chatMessages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Chat;\r\n\r\n/*\r\n\r\n        <video controls autoplay>\r\n          <source src=\"https://files.catbox.moe/d0sb20.mp4\" type=\"video/mp4\"></source>\r\n        </video>\r\n\r\n*/","import React, { Component } from 'react';\r\n\r\nclass SiteIntro extends Component {\r\n\r\n  overlay  = () => {\r\n    this.overlayRef.style.display = 'none';\r\n  } \r\n\r\n  componentDidMount() {\r\n    (window.adsbygoogle = window.adsbygoogle || []).push({\r\n      google_ad_client: \"ca-pub-4945903400451091\",\r\n      enable_page_level_ads: true\r\n });\r\n  }\r\n\r\n  render() {    \r\n\r\n    return (\r\n            <div id = \"overlay\" ref = {overlayRef => {this.overlayRef = overlayRef}} >      \r\n                <p>Please check the <b>TOP RIGHT</b> (in Chrome) <b>TOP LEFT</b> (in Firefox) of your browser and make sure your webcam/mic is accessible to the browser!<br /></p>\r\n                <p>Welcome to Random.moe!</p>\r\n                <p>Random.moe is an <a href=\"https://github.com/openpgpjs/openpgpjs\">encrypted</a>, <a href=\"https://github.com/feross/simple-peer\">peer-to-peer</a>, <a href= \"https://github.com/paradoxmoe/paradox\">open source</a> random chat alternative to Omegle/Chatroulette/etc.</p>\r\n                <p>Special thanks to: <a href='http://stackoverflow.com/a/35387759'>Kecer</a> on Stackoverflow and <a href=\"https://codepen.io/Anomaly942/\">Kaustav</a> on CodePen</p>\r\n            \r\n                <p>Youtube Support! Just Copy and Paste a youtube URL into the chat!</p>\r\n                <p>Imgur support! </p>\r\n                <p><a href=\"http://catbox.moe\">Catbox</a> Support! Just Copy and Paste a Catbox.moe URL into the chat! (Images and videos!) </p>\r\n                <p>As the site is currently in Early Access, please report bugs or other issues <a href= \"https://github.com/paradoxmoe/RandomMOE/issues\">here</a>!</p>\r\n                <p>Furthermore, as you are talking to random and anonymous users, please exercise caution when using this platform.</p>\r\n                <p>We use cookies/local storage to store your PGP encryption keys, so be aware of this.</p>\r\n\r\n                <p>If you'd like to contribute to the success of random.moe, please visit our <a href=\"https://www.patreon.com/randomMOE\">Patreon</a>!</p>\r\n                <button onClick={this.overlay}>Click here if you've read the above!</button>\r\n\r\n                <ins className=\"adsbygoogle\"\r\n                  style={{display: 'block', width: '970px', height: '250px'}}\r\n                  data-ad-client=\"ca-pub-4945903400451091\"\r\n                  data-ad-slot=\"3171544049\">\r\n                 </ins>\r\n\r\n            </div>\r\n    )\r\n  };\r\n}\r\n\r\n\r\n\r\nexport default SiteIntro;","import React, { Component } from 'react';\r\n\r\nclass CreateMessage extends Component {\r\n\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({content: e.target.value}); \r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.createMessage(\"You\", this.state.content);\r\n        this.setState({content: '', user: 'You' })\r\n    }\r\n  render() {    \r\n\r\n    return (\r\n            <form onSubmit = {this.onSubmit} style = {{position: 'fixed', bottom: '0', width: '100%' }}>\r\n                <input type=\"text\" name=\"title\" style={{flex: '10', padding: '5px', width: '90%'}} placeholder=\"Type Message Here...\" value={this.state.content} onChange={this.onChange}></input>\r\n                <input type=\"submit\" value=\"submit\" className = \"btn\" style={{flex: '1'}} />\r\n            </form>\r\n    )\r\n  };\r\n}\r\n\r\n\r\n\r\nexport default CreateMessage;\r\n","//https://codepen.io/Anomaly942/pen/pOqRrz?editors=0010\r\n//https://codepen.io/kevincardona1/pen/LWwZyx\r\n\r\nimport React, { Component } from 'react';\r\nimport { brotliDecompress } from 'zlib';\r\n\r\nclass CanvasBackground extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        \r\n        this.fillcolor = \"#000000\";\r\n        this.strokecolor = \"#000000\";\r\n        this.strokesize = \"#000000\";\r\n        \r\n        this.state = {width: window.innerWidth, height: window.innerHeight};      \r\n    }\r\n\r\n    componentWillMount() {\r\n      //this.onResize();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ctx = this.canvasRef.getContext('2d');\r\n        this.setState({width: window.innerWidth, height: window.innerHeight});    \r\n        window.addEventListener('resize', this.onResize);\r\n        this.onResize();\r\n        this.createCanvasBackground();\r\n      }\r\n    \r\n      componentDidUpdate() {\r\n        this.createCanvasBackground();\r\n      }\r\n\r\n    lineGradient = (x, y, xEnd, yEnd, color1, color2) => {\r\n        let gradient = this.ctx.createLinearGradient(x, y, xEnd, yEnd);\r\n        gradient.addColorStop(0, color1);\r\n        gradient.addColorStop(1, color2);\r\n        return gradient;\r\n    }\r\n\r\n    radialGradient = (x, y, rad, xEnd, yEnd, radEnd, color1, color2) => {\r\n      let gradient = this.ctx.createRadialGradient(x, y, rad, xEnd, yEnd, radEnd, color1, color2);\r\n      gradient.addColorStop(0, color1);\r\n      gradient.addColorStop(1, color2);\r\n      return gradient;\r\n    }\r\n\r\n    rand = (start, end) => {\r\n      return Math.ceil(Math.random() * (end - start) + start);\r\n    }\r\n\r\n    canvasSize = () => {\r\n        this.canvasRef.width = this.state.width;\r\n        this.canvasRef.height = this.state.height;\r\n        //this.setState({canvasRef: this.canvasRef});\r\n    }\r\n\r\n    fill = (col_hex) => {\r\n        this.fillcolor = col_hex;\r\n    }\r\n\r\n    stroke = (col_hex) => {\r\n      this.strokecolor = col_hex;\r\n    }\r\n\r\n    border = (int_pix) => {\r\n      this.strokesize = int_pix;\r\n    }\r\n\r\n    rect = (x, y, sizeX, sizeY) => {\r\n        this.ctx.fillStyle = this.fillcolor;\r\n        this.ctx.strokeStyle = this.strokecolor;\r\n        this.ctx.lineWidth = this.strokesize;\r\n        this.ctx.beginPath();\r\n        this.ctx.rect(x, y, sizeX, sizeY);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n\r\n        //this.setState({ctx: this.ctx}); \r\n    }\r\n\r\n    circle = (x, y, radius) => {\r\n      this.ctx.fillStyle = this.fillcolor;\r\n      this.ctx.strokeStyle = this.strokecolor;\r\n      this.ctx.lineWidth = this.strokesize;\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(x, y, radius, 0, Math.PI*2, false);\r\n      this.ctx.fill();\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n\r\n    }\r\n\r\n    point = (x, y) => {\r\n      this.ctx.fillStyle = this.fillcolor;\r\n      this.ctx.strokeStyle = this.strokecolor;\r\n      this.ctx.lineWidth = this.strokeSize;\r\n\r\n      this.ctx.beginPath();\r\n      this.ctx.rect(x, y, 1, 1);\r\n      this.ctx.fill();\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    }\r\n\r\n    \r\n    canvasBackgroundFill = () => {\r\n        this.fill(this.lineGradient(this.state.width/1, 0, this.state.width/2, this.state.height * 1.3, \"#200030\", '#9c046e'));\r\n        this.rect(0, 0, this.state.width, this.state.height);\r\n    }\r\n    \r\n    stars = () => {\r\n      this.stroke(\"#ffffff\");\r\n      this.border(Math.min((this.state.width / 1440), (this.state.height / 900)) * 1.5);\r\n      for(let i = 0; i < (this.state.width / 1.5); i++) {\r\n        this.point(this.rand(0, this.state.width), this.rand(0, this.state.width));\r\n      }\r\n      this.stroke(\"#ffffff00\");\r\n    }\r\n\r\n    sun = () => {\r\n      var radius = Math.min((this.state.width/1440), (this.state.height/900)) * 400;\r\n      this.fill(this.lineGradient(this.state.width/2,0,this.state.width/2,this.state.height*1.1, \"#ff4400\", \"#ffff00\"));\r\n      this.circle(this.state.width/2, this.state.height/2, radius);\r\n    }\r\n\r\n    water = () => {\r\n      this.fill(this.radialGradient((this.state.width / 2), (this.state.height * (2/3)), ((this.state.width / 1440)*100), (this.state.width / 2), (this.state.height * (2/3)), ((this.state.height / 900) * 600), \"#002244cc\", \"#000044cc\")); \r\n      this.rect(0, this.state.height*(2/3), this.state.width, this.state.height / 3);\r\n    }\r\n\r\n    onResize = () => {\r\n        this.setState({width: window.innerWidth, height: window.innerHeight});\r\n        this.canvasSize();\r\n        this.createCanvasBackground();\r\n    }\r\n\r\n    createCanvasBackground = () => {\r\n      this.canvasBackgroundFill();\r\n      this.stars();\r\n      this.sun();\r\n      this.water();\r\n\r\n\r\n        //ctx.font = \"30px Arial\";\r\n        //ctx.strokeText(\"Hello CanvasBackground\", 10, 50);\r\n          //var width = window.innerWidth;\r\n          //var height = window.innerHeight;\r\n    \r\n    \r\n    }\r\n\r\n  render() {    \r\n \r\n    return (\r\n        <canvas ref= {canvasRef => {this.canvasRef = canvasRef}}>\r\n\r\n        </canvas>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CanvasBackground;","//npm run build\r\n\r\nimport React, { Component } from 'react';\r\nimport Chat from './components/Chat';\r\nimport SiteIntro from './components/SiteIntro';\r\nimport CreateMessage from './components/CreateMessage';\r\nimport CanvasBackground from './components/CanvasBackground';\r\nimport * as openpgp from 'openpgp';\r\nimport './App.css';\r\nimport Peer from 'simple-peer'; \r\nimport socketIOClient from 'socket.io-client';\r\n//import data from 'emoji-mart/data/messenger.json'\r\n//import { NimblePicker } from 'emoji-mart'\r\n//import $ from 'jquery';\r\n\r\n\r\nopenpgp.initWorker({path: './dist/openpgp.worker.min.js'}); \r\n\r\nif(typeof localStorage.publicKey == 'undefined' || typeof localStorage.privateKey == 'undefined' || typeof localStorage.pass == 'undefined') {\r\n\r\n  var cryptoArray = new Uint32Array(4);\r\n  window.crypto.getRandomValues(cryptoArray);\r\n  localStorage.pass = cryptoArray[2].toString()\r\n  var options = {\r\n    userIds: [{name: cryptoArray[3].toString(), email: cryptoArray[0] + '@' + cryptoArray[1] + '.com' }],\r\n    numBits: 2048,\r\n    passphrase: localStorage.pass\r\n  }\r\n\r\n  openpgp.generateKey(options).then(function(key) {\r\n  localStorage.setItem('privateKey', key.privateKeyArmored);\r\n  localStorage.setItem('publicKey', key.publicKeyArmored);\r\n\r\n  })\r\n}\r\n\r\nclass App extends Component {\r\n  \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      chatMessages: [ \r\n      ],\r\n      peerInfo: null,\r\n      stream: null,\r\n      peer: null,\r\n      inConvo: false,\r\n    }\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    navigator.mediaDevices.getUserMedia({video:true, audio: true}).then(stream => {\r\n      this.clientRef.srcObject = stream;\r\n      this.clientRef.onloaddedmetadata = this.clientRef.play();\r\n      this.forceUpdate();\r\n    })\r\n  }\r\n\r\n  socketConnection = (stream) => {\r\n    var socket = socketIOClient.connect(\"https://random.moe\");   \r\n    this.setState({chatMessages: [...this.state.chatMessages, {id: this.state.chatMessages.length, user: \"Client\", message:\"Connecting to Server...\"}]})\r\n    socket.on('peer', (data) => {\r\n      this.createPeer(data.initiator, stream);\r\n      \r\n      console.log(\"Server told client to become initiator: \" + data.initiator);\r\n      if(data.initiator) {\r\n        this.state.peer.on(\"signal\", (data) => {\r\n          socket.emit(\"initiatorData\", data);\r\n          this.setState({chatMessages: [...this.state.chatMessages, {id: this.state.chatMessages.length, user: \"Client\", message:\"Emitting Initiator data to Server...\"}]})\r\n        })\r\n      }\r\n    });\r\n\r\n      socket.on('joinInitiator', (data) => {\r\n        this.setState({chatMessages: [...this.state.chatMessages, {id: this.state.chatMessages.length, user: \"Client\", message:\"Joining Initiator...\"}]})\r\n        this.state.peer.signal(data.data);\r\n        \r\n        if(!data.initiator) {\r\n          var initiaitorSocketId = data.socketid;\r\n          this.state.peer.on('signal', (data) => {\r\n            socket.emit(\"backToInitiator\", {socketid: initiaitorSocketId, data: data});\r\n            this.setState({chatMessages: [...this.state.chatMessages, {id: this.state.chatMessages.length, user: \"Client\", message:\"Recieving Initiator's Data...\"}]})\r\n          })\r\n        }\r\n      })\r\n\r\n      socket.on('toInitiatorFromServer', (data) => {\r\n        this.state.peer.signal(data.data);\r\n\r\n        this.setState({chatMessages: [...this.state.chatMessages, {id: this.state.chatMessages.length, user: \"Client\", message:\"Connecting to Peer...\"}]})\r\n      })\r\n    \r\n  }\r\n\r\n  submitButton = () => {\r\n    console.log(\"Can Submit\")\r\n  }\r\n\r\n  next = () => {\r\n    this.setState({chatMessages: [...this.state.chatMessages, {id: this.state.chatMessages.length, user: \"Client\", message:\"Finding User...\"}]})\r\n    if(this.state.peer != null && typeof this.state.peer != 'undefined') {\r\n        this.state.peer.destroy();\r\n        this.setState({\r\n          chatMessages: [ \r\n          ],\r\n          peerInfo: null,\r\n          stream: null,\r\n          peer: null,\r\n          inConvo: false,\r\n        });\r\n      }\r\n          navigator.mediaDevices.getUserMedia({video:true, audio: true}).then(stream => {\r\n            this.socketConnection(stream);\r\n          })\r\n  }\r\n\r\n  //Needs to be finished\r\n  createPeer = (initiator, stream) => {\r\n  var peer = new Peer({initiator: initiator, trickle: false, stream: stream});\r\n\r\n  this.setState({inConvo: true});\r\n  \r\n    peer.on(\"connect\", () => {\r\n        peer.send(JSON.stringify({isPublicKey: true, peerPublicKey: localStorage.publicKey}))\r\n        this.setState({chatMessages: []});\r\n    })\r\n\r\n    peer.on(\"data\", async (data) => {\r\n      data = JSON.parse(data);\r\n\r\n      if(data.isPublicKey === true) {\r\n        localStorage.setItem(\"peerPublicKey\", data.peerPublicKey);\r\n        console.log(\"Public Key Recieved!\");\r\n        this.setState({chatMessages: [{id: this.state.chatMessages.length, user: \"Client\", message:\"You can now send messages!\"}]});\r\n\r\n      } else {\r\n\r\n        let privKey = ( await openpgp.key.readArmored(localStorage.privateKey)).keys[0];\r\n        await privKey.decrypt(localStorage.pass);\r\n\r\n        let options = {\r\n          message: await openpgp.message.readArmored(data.data),\r\n          privateKeys: [privKey]\r\n        }\r\n\r\n        openpgp.decrypt(options).then( (plaintext) => {\r\n          let newMessage = {\r\n            id: this.state.chatMessages.length,\r\n            user: data.user,\r\n            message: plaintext.data \r\n          }\r\n\r\n          this.setState({chatMessages: [...this.state.chatMessages, newMessage]});\r\n        })\r\n\r\n\r\n      }\r\n\r\n\r\n    });\r\n\r\n    peer.on(\"stream\", (data) => {\r\n      this.setState({peerStream: data});\r\n      this.peerRef.srcObject = this.state.peerStream;\r\n      this.peerRef.onloaddedmetadata = this.peerRef.play();\r\n    });\r\n\r\n    this.setState({peer: peer, inConvo: true});\r\n    return peer;\r\n  }\r\n\r\n\r\n  createMessage = async (user, content) => {\r\n\r\n      const newMessage = {\r\n        id: this.state.chatMessages.length,\r\n        user: user,\r\n        message: content \r\n      }\r\n\r\n      this.setState({chatMessages: [...this.state.chatMessages, newMessage]});\r\n      let data = openpgp.message.fromText(content);\r\n\r\n      let options = {\r\n        message: data,\r\n        publicKeys: ( await openpgp.key.readArmored(localStorage.peerPublicKey)).keys,\r\n      }\r\n\r\n      openpgp.encrypt(options).then( (ciphertext) => {\r\n        let data = ciphertext.data;\r\n        this.state.peer.send(JSON.stringify({user: 'Anon', data: data}));\r\n      });\r\n\r\n      \r\n     \r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\"> \r\n      <SiteIntro />\r\n\r\n      <div id = \"videoChat\">\r\n        <div><h3 id = \"logo\">Random.moe</h3> <a href=\"https://www.patreon.com/randomMOE\">Patreon</a> | <a href=\"https://twitter.com/Twitch_NotDem\">Twitter</a> | <a href=\"https://twitch.tv/notdem\">Twitch</a> | <a href=\"https://github.com/paradoxmoe/RandomMOE\">Github</a></div>\r\n        <video ref = {clientRef => {this.clientRef = clientRef}} controls muted></video>\r\n        <video ref = {peerRef => {this.peerRef = peerRef}} controls></video>\r\n      </div>\r\n        <div id = \"chatApp\" class = \"disableScrollbars\">\r\n          <Chat chatMessages = {this.state.chatMessages} submit = {this.submitButton} />\r\n          <button type=\"button\" onClick = {this.next} ref = {findUsers => {this.findUsers = findUsers}}>Next</button>\r\n        </div>\r\n        {/* <NimblePicker set='messenger' data={data} /> */}\r\n        <CreateMessage createMessage =  {this.createMessage} peer = {this.peer} />\r\n        <CanvasBackground />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}